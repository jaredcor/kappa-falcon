{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/common\";\nfunction HomeComponent_div_3_section_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.…µ…µelementStart(0, \"section\");\n    i0.…µ…µtext(1, \" File details: \");\n    i0.…µ…µelementStart(2, \"ul\")(3, \"li\");\n    i0.…µ…µtext(4);\n    i0.…µ…µelementEnd();\n    i0.…µ…µelementStart(5, \"li\");\n    i0.…µ…µtext(6);\n    i0.…µ…µelementEnd();\n    i0.…µ…µelementStart(7, \"li\");\n    i0.…µ…µtext(8);\n    i0.…µ…µelementEnd()()();\n  }\n  if (rf & 2) {\n    const file_r6 = ctx.$implicit;\n    i0.…µ…µadvance(4);\n    i0.…µ…µtextInterpolate1(\"Name: \", file_r6.name, \"\");\n    i0.…µ…µadvance(2);\n    i0.…µ…µtextInterpolate1(\"Type: \", file_r6.type, \"\");\n    i0.…µ…µadvance(2);\n    i0.…µ…µtextInterpolate1(\"Size: \", file_r6.size, \" bytes\");\n  }\n}\nfunction HomeComponent_div_3_p_5_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.…µ…µelementStart(0, \"p\");\n    i0.…µ…µtext(1, \"\\u23F3 Uploading...\");\n    i0.…µ…µelementEnd();\n  }\n}\nfunction HomeComponent_div_3_p_6_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.…µ…µelementStart(0, \"p\");\n    i0.…µ…µtext(1, \"\\u2705 Done!\");\n    i0.…µ…µelementEnd();\n  }\n}\nfunction HomeComponent_div_3_p_7_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.…µ…µelementStart(0, \"p\");\n    i0.…µ…µtext(1, \"\\u274C Error!\");\n    i0.…µ…µelementEnd();\n  }\n}\nfunction HomeComponent_div_3_p_8_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.…µ…µelementStart(0, \"p\");\n    i0.…µ…µtext(1, \"\\uD83D\\uDE36 Waiting to upload...\");\n    i0.…µ…µelementEnd();\n  }\n}\nfunction HomeComponent_div_3_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r8 = i0.…µ…µgetCurrentView();\n    i0.…µ…µelementStart(0, \"div\", 2);\n    i0.…µ…µtemplate(1, HomeComponent_div_3_section_1_Template, 9, 3, \"section\", 3);\n    i0.…µ…µelementStart(2, \"button\", 4);\n    i0.…µ…µlistener(\"click\", function HomeComponent_div_3_Template_button_click_2_listener() {\n      i0.…µ…µrestoreView(_r8);\n      const ctx_r7 = i0.…µ…µnextContext();\n      return i0.…µ…µresetView(ctx_r7.onUpload());\n    });\n    i0.…µ…µtext(3, \"Upload the file\");\n    i0.…µ…µelementEnd();\n    i0.…µ…µelementStart(4, \"section\", 5);\n    i0.…µ…µtemplate(5, HomeComponent_div_3_p_5_Template, 2, 0, \"p\", 6);\n    i0.…µ…µtemplate(6, HomeComponent_div_3_p_6_Template, 2, 0, \"p\", 6);\n    i0.…µ…µtemplate(7, HomeComponent_div_3_p_7_Template, 2, 0, \"p\", 6);\n    i0.…µ…µtemplate(8, HomeComponent_div_3_p_8_Template, 2, 0, \"p\", 7);\n    i0.…µ…µelementEnd()();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.…µ…µnextContext();\n    i0.…µ…µadvance(1);\n    i0.…µ…µproperty(\"ngForOf\", ctx_r0.files);\n    i0.…µ…µadvance(3);\n    i0.…µ…µproperty(\"ngSwitch\", ctx_r0.status);\n    i0.…µ…µadvance(1);\n    i0.…µ…µproperty(\"ngSwitchCase\", \"uploading\");\n    i0.…µ…µadvance(1);\n    i0.…µ…µproperty(\"ngSwitchCase\", \"success\");\n    i0.…µ…µadvance(1);\n    i0.…µ…µproperty(\"ngSwitchCase\", \"fail\");\n  }\n}\nexport class HomeComponent {\n  constructor(http) {\n    this.http = http;\n    this.fileName = '';\n  }\n  onFileSelected(event) {\n    const file = event.target.files[0];\n    if (file) {\n      this.fileName = file.name;\n      const formData = new FormData();\n      formData.append(\"thumbnail\", file);\n      const upload$ = this.http.post(\"/api/thumbnail-upload\", formData, {\n        reportProgress: true,\n        observe: 'events'\n      }).pipe(finalize(() => this.reset()));\n      this.uploadSub = upload$.subscribe(event => {\n        if (event.type == HttpEventType.UploadProgress) {\n          this.uploadProgress = Math.round(100 * (event.loaded / event.total));\n        }\n      });\n    }\n  }\n  cancelUpload() {\n    this.uploadSub.unsubscribe();\n    this.reset();\n  }\n  reset() {\n    this.uploadProgress = null;\n    this.uploadSub = null;\n  }\n}\nHomeComponent.…µfac = function HomeComponent_Factory(t) {\n  return new (t || HomeComponent)(i0.…µ…µdirectiveInject(i1.HttpClient));\n};\nHomeComponent.…µcmp = /*@__PURE__*/i0.…µ…µdefineComponent({\n  type: HomeComponent,\n  selectors: [[\"app-home\"]],\n  inputs: {\n    requiredFileType: \"requiredFileType\"\n  },\n  decls: 4,\n  vars: 1,\n  consts: [[\"type\", \"file\", \"multiple\", \"\", 1, \"file-input\", 3, \"change\"], [\"class\", \"file-section\", 4, \"ngIf\"], [1, \"file-section\"], [4, \"ngFor\", \"ngForOf\"], [1, \"upload-button\", 3, \"click\"], [3, \"ngSwitch\"], [4, \"ngSwitchCase\"], [4, \"ngSwitchDefault\"]],\n  template: function HomeComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.…µ…µelementStart(0, \"h2\");\n      i0.…µ…µtext(1, \"Multiple File Upload\");\n      i0.…µ…µelementEnd();\n      i0.…µ…µelementStart(2, \"input\", 0);\n      i0.…µ…µlistener(\"change\", function HomeComponent_Template_input_change_2_listener($event) {\n        return ctx.onChange($event);\n      });\n      i0.…µ…µelementEnd();\n      i0.…µ…µtemplate(3, HomeComponent_div_3_Template, 9, 5, \"div\", 1);\n    }\n    if (rf & 2) {\n      i0.…µ…µadvance(3);\n      i0.…µ…µproperty(\"ngIf\", ctx.files.length);\n    }\n  },\n  dependencies: [i2.NgForOf, i2.NgIf, i2.NgSwitch, i2.NgSwitchCase, i2.NgSwitchDefault],\n  styles: [\".file-input[_ngcontent-%COMP%] {\\n  display: none;\\n}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvaG9tZS9ob21lLmNvbXBvbmVudC5jc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7RUFDRSxhQUFhO0FBQ2YiLCJzb3VyY2VzQ29udGVudCI6WyIuZmlsZS1pbnB1dCB7XG4gIGRpc3BsYXk6IG5vbmU7XG59Il0sInNvdXJjZVJvb3QiOiIifQ== */\"]\n});\nexport class FileItem {\n  constructor() {\n    this.name = \"\";\n    this.size = 0;\n    this.type = \"\";\n  }\n}","map":{"version":3,"mappings":"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","names":["i0","HomeComponent","constructor","http","onFileSelected","event","file","target","files","fileName","name","formData","FormData","append","upload$","post","reportProgress","observe","pipe","finalize","reset","uploadSub","subscribe","type","HttpEventType","UploadProgress","uploadProgress","Math","round","loaded","total","cancelUpload","unsubscribe","selectors","inputs","requiredFileType","decls","vars","consts","template","ctx","FileItem"],"sourceRoot":"","sources":["/Users/jaredcortez/kappa-falcon/kappa-falcon/ClientApp/src/app/home/home.component.html","/Users/jaredcortez/kappa-falcon/kappa-falcon/ClientApp/src/app/home/home.component.ts"],"sourcesContent":["<!-- <input\n  id=\"1-basic\"\n  type=\"file\"\n  #file_input\n  (change)=\"UploadFiles(file_input.files)\"\n  webkitdirectory\n  multiple\n/>\n<div style=\"width: 80%; margin-top: 30px\">\n  <ng-container *ngIf=\"uploadedFiles?.length\">\n    Directory selected: {{ currentFolder }}.\n  </ng-container>\n</div> -->\n\n<!-- <button\n  type=\"button\"\n  class=\"nav-item nav-link\"\n  [routerLink]=\"['/user']\"\n  (click)=\"newMessage()\"\n>\n  Test\n</button> -->\n\n<!-- <button type=\"button\" (click)=\"test(uploadedFiles)\">Upload</button> -->\n\n<h2>Multiple File Upload</h2>\n\n<input type=\"file\" class=\"file-input\" multiple (change)=\"onChange($event)\" />\n\n<div *ngIf=\"files.length\" class=\"file-section\">\n  <section *ngFor=\"let file of files\">\n    File details:\n    <ul>\n      <li>Name: {{ file.name }}</li>\n      <li>Type: {{ file.type }}</li>\n      <li>Size: {{ file.size }} bytes</li>\n    </ul>\n  </section>\n\n  <button (click)=\"onUpload()\" class=\"upload-button\">Upload the file</button>\n\n  <section [ngSwitch]=\"status\">\n    <p *ngSwitchCase=\"'uploading'\">‚è≥ Uploading...</p>\n    <p *ngSwitchCase=\"'success'\">‚úÖ Done!</p>\n    <p *ngSwitchCase=\"'fail'\">‚ùå Error!</p>\n    <p *ngSwitchDefault>üò∂ Waiting to upload...</p>\n  </section>\n</div>\n","import { Component, EventEmitter, Input, OnDestroy, OnInit, Output } from '@angular/core';\nimport { lastValueFrom, Subscription } from 'rxjs';\nimport { UploadFileService } from '../services/upload-file.service';\nimport { SendFileService } from '../services/send-file.service';\nimport { HttpClient } from \"@angular/common/http\";\n\n@Component({\n  selector: 'app-home',\n  templateUrl: './home.component.html',\n  styleUrls: ['./home.component.css'],\n})\nexport class HomeComponent {\n  // @Input() acceptedFormat: string = '.pdf';\n  // @Input() maxSize: number = 102400;\n  // @Output() onSendFilesList: EventEmitter<FileItem[]> = new EventEmitter<\n  //   FileItem[]\n  // >();\n  // filesList = [];\n  // uploadedFiles: any = [];\n  // currentFolder: any = \"\";\n\n  // message: any;\n  // subscription: Subscription = new Subscription;\n\n  // constructor(private uploadFileService: UploadFileService, private data: SendFileService) { }\n  // ngOnInit() {\n  //   this.subscription = this.data.currentMessage.subscribe((message: any) => this.message = message)\n  // }\n\n  // ngOnDestroy(): void {\n  //   this.subscription.unsubscribe();\n  // }\n\n  // async UploadFiles(files: any) {\n  //   const folderHolder: any = {};\n  //   this.uploadedFiles = [];\n\n  //   let file: any;\n  //   for (file of Array.from(files)) {\n  //     // console.log(file['webkitRelativePath'], file['size'], file['type']);\n  //     const path: string = file['webkitRelativePath'];\n  //     const pathPieces: any = path.split('/');\n\n  //     if (!pathPieces.reverse()[0].startsWith('.')) {\n  //       this.currentFolder = pathPieces[1];\n  //       // console.log('Checking for folder ', currentFolder, 'in', folderHolder);\n  //       if (folderHolder[this.currentFolder]) {\n  //         const b = await lastValueFrom(\n  //           this.uploadFileService.uploadFile(folderHolder[this.currentFolder], file)\n  //         );\n  //         this.uploadedFiles.push({\n  //           fileName: pathPieces[0],\n  //           folder: this.currentFolder,\n  //           folderId: folderHolder[this.currentFolder],\n  //         });\n  //       } else {\n  //         const folderId = await lastValueFrom(\n  //           this.uploadFileService.createFolder(this.currentFolder)\n  //         );\n  //         folderHolder[this.currentFolder] = folderId;\n\n  //         const p = await lastValueFrom(\n  //           this.uploadFileService.uploadFile(folderHolder[this.currentFolder], file)\n  //         );\n  //         this.uploadedFiles.push({\n  //           fileName: pathPieces[0],\n  //           folder: this.currentFolder,\n  //           folderId: folderHolder[this.currentFolder],\n  //         });\n  //       }\n  //     }\n  //   }\n  //   console.log(this.uploadedFiles);\n  // }\n  // newMessage() {\n  //   this.data.changeMessage(this.uploadedFiles);\n  // }\n  @Input()\n    requiredFileType:string;\n\n    fileName = '';\n    uploadProgress:number;\n    uploadSub: Subscription;\n\n    constructor(private http: HttpClient) {}\n\n    onFileSelected(event) {\n        const file:File = event.target.files[0];\n      \n        if (file) {\n            this.fileName = file.name;\n            const formData = new FormData();\n            formData.append(\"thumbnail\", file);\n\n            const upload$ = this.http.post(\"/api/thumbnail-upload\", formData, {\n                reportProgress: true,\n                observe: 'events'\n            })\n            .pipe(\n                finalize(() => this.reset())\n            );\n          \n            this.uploadSub = upload$.subscribe(event => {\n              if (event.type == HttpEventType.UploadProgress) {\n                this.uploadProgress = Math.round(100 * (event.loaded / event.total));\n              }\n            })\n        }\n    }\n\n  cancelUpload() {\n    this.uploadSub.unsubscribe();\n    this.reset();\n  }\n\n  reset() {\n    this.uploadProgress = null;\n    this.uploadSub = null;\n  }\n}\n\nexport class FileItem {\n  name: string = \"\";\n  size: number = 0;\n  type: string = \"\";\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}