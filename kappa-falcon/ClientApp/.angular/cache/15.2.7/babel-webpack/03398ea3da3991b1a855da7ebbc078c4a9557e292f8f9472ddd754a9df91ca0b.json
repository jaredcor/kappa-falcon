{"ast":null,"code":"import { throwError } from \"rxjs\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class HomeComponent {\n  constructor(http) {\n    this.http = http;\n    // @Input() acceptedFormat: string = '.pdf';\n    // @Input() maxSize: number = 102400;\n    // @Output() onSendFilesList: EventEmitter<FileItem[]> = new EventEmitter<\n    //   FileItem[]\n    // >();\n    // filesList = [];\n    // uploadedFiles: any = [];\n    // currentFolder: any = \"\";\n    // message: any;\n    // subscription: Subscription = new Subscription;\n    // constructor(private uploadFileService: UploadFileService, private data: SendFileService) { }\n    // ngOnInit() {\n    //   this.subscription = this.data.currentMessage.subscribe((message: any) => this.message = message)\n    // }\n    // ngOnDestroy(): void {\n    //   this.subscription.unsubscribe();\n    // }\n    // async UploadFiles(files: any) {\n    //   const folderHolder: any = {};\n    //   this.uploadedFiles = [];\n    //   let file: any;\n    //   for (file of Array.from(files)) {\n    //     // console.log(file['webkitRelativePath'], file['size'], file['type']);\n    //     const path: string = file['webkitRelativePath'];\n    //     const pathPieces: any = path.split('/');\n    //     if (!pathPieces.reverse()[0].startsWith('.')) {\n    //       this.currentFolder = pathPieces[1];\n    //       // console.log('Checking for folder ', currentFolder, 'in', folderHolder);\n    //       if (folderHolder[this.currentFolder]) {\n    //         const b = await lastValueFrom(\n    //           this.uploadFileService.uploadFile(folderHolder[this.currentFolder], file)\n    //         );\n    //         this.uploadedFiles.push({\n    //           fileName: pathPieces[0],\n    //           folder: this.currentFolder,\n    //           folderId: folderHolder[this.currentFolder],\n    //         });\n    //       } else {\n    //         const folderId = await lastValueFrom(\n    //           this.uploadFileService.createFolder(this.currentFolder)\n    //         );\n    //         folderHolder[this.currentFolder] = folderId;\n    //         const p = await lastValueFrom(\n    //           this.uploadFileService.uploadFile(folderHolder[this.currentFolder], file)\n    //         );\n    //         this.uploadedFiles.push({\n    //           fileName: pathPieces[0],\n    //           folder: this.currentFolder,\n    //           folderId: folderHolder[this.currentFolder],\n    //         });\n    //       }\n    //     }\n    //   }\n    //   console.log(this.uploadedFiles);\n    // }\n    // newMessage() {\n    //   this.data.changeMessage(this.uploadedFiles);\n    // }\n    this.status = \"initial\";\n    this.files = [];\n  }\n  ngOnInit() {}\n  onChange(event) {\n    const files = event.target.files;\n    if (files.length) {\n      this.status = \"initial\";\n      this.files = files;\n    }\n  }\n  onUpload() {\n    if (this.files.length) {\n      const formData = new FormData();\n      [...this.files].forEach(file => {\n        formData.append(\"file\", file, file.name);\n      });\n      const upload$ = this.http.post(\"https://httpbin.com/post\", formData);\n      this.status = \"uploading\";\n      upload$.subscribe({\n        next: () => {\n          this.status = \"success\";\n        },\n        error: error => {\n          this.status = \"fail\";\n          return throwError(() => error);\n        }\n      });\n    }\n  }\n}\nHomeComponent.ɵfac = function HomeComponent_Factory(t) {\n  return new (t || HomeComponent)(i0.ɵɵdirectiveInject(i1.HttpClient));\n};\nHomeComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: HomeComponent,\n  selectors: [[\"app-home\"]],\n  decls: 2,\n  vars: 0,\n  consts: [[\"type\", \"file\", \"webkitdirectory\", \"\", \"directory\", \"\", \"multiple\", \"\", 3, \"change\"]],\n  template: function HomeComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\")(1, \"input\", 0);\n      i0.ɵɵlistener(\"change\", function HomeComponent_Template_input_change_1_listener($event) {\n        return ctx.handleFolderUpload($event);\n      });\n      i0.ɵɵelementEnd()();\n    }\n  },\n  styles: [\"\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n});\nexport class FileItem {\n  constructor() {\n    this.name = \"\";\n    this.size = 0;\n    this.type = \"\";\n  }\n}","map":{"version":3,"mappings":"AAKA,SAASA,UAAU,QAAQ,MAAM;;;AAOjC,OAAM,MAAOC,aAAa;EAqExBC,YAAoBC,IAAgB;IAAhB,SAAI,GAAJA,IAAI;IApExB;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IAEA;IACA;IAEA;IACA;IACA;IACA;IAEA;IACA;IACA;IAEA;IACA;IACA;IAEA;IACA;IACA;IACA;IACA;IAEA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IAEA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA,WAAM,GAAiD,SAAS;IAChE,UAAK,GAAW,EAAE;EAEqB;EAEvCC,QAAQ,IAAU;EAElBC,QAAQ,CAACC,KAAU;IACjB,MAAMC,KAAK,GAAGD,KAAK,CAACE,MAAM,CAACD,KAAK;IAEhC,IAAIA,KAAK,CAACE,MAAM,EAAE;MAChB,IAAI,CAACC,MAAM,GAAG,SAAS;MACvB,IAAI,CAACH,KAAK,GAAGA,KAAK;;EAEtB;EAEAI,QAAQ;IACN,IAAI,IAAI,CAACJ,KAAK,CAACE,MAAM,EAAE;MACrB,MAAMG,QAAQ,GAAG,IAAIC,QAAQ,EAAE;MAE/B,CAAC,GAAG,IAAI,CAACN,KAAK,CAAC,CAACO,OAAO,CAAEC,IAAI,IAAI;QAC/BH,QAAQ,CAACI,MAAM,CAAC,MAAM,EAAED,IAAI,EAAEA,IAAI,CAACE,IAAI,CAAC;MAC1C,CAAC,CAAC;MAEF,MAAMC,OAAO,GAAG,IAAI,CAACf,IAAI,CAACgB,IAAI,CAAC,0BAA0B,EAAEP,QAAQ,CAAC;MAEpE,IAAI,CAACF,MAAM,GAAG,WAAW;MAEzBQ,OAAO,CAACE,SAAS,CAAC;QAChBC,IAAI,EAAE,MAAK;UACT,IAAI,CAACX,MAAM,GAAG,SAAS;QACzB,CAAC;QACDY,KAAK,EAAGA,KAAU,IAAI;UACpB,IAAI,CAACZ,MAAM,GAAG,MAAM;UACpB,OAAOV,UAAU,CAAC,MAAMsB,KAAK,CAAC;QAChC;OACD,CAAC;;EAEN;;AAxGWrB,aAAa;mBAAbA,aAAa;AAAA;AAAbA,aAAa;QAAbA,aAAa;EAAAsB;EAAAC;EAAAC;EAAAC;EAAAC;IAAA;MCa1BC,2BAAK;MAGDA;QAAA,OAAUC,8BAA0B;MAAA,EAAC;MAFvCD,iBAME;;;;;ADuFJ,OAAM,MAAOE,QAAQ;EAArB5B;IACE,SAAI,GAAW,EAAE;IACjB,SAAI,GAAW,CAAC;IAChB,SAAI,GAAW,EAAE;EACnB","names":["throwError","HomeComponent","constructor","http","ngOnInit","onChange","event","files","target","length","status","onUpload","formData","FormData","forEach","file","append","name","upload$","post","subscribe","next","error","selectors","decls","vars","consts","template","i0","ctx","FileItem"],"sourceRoot":"","sources":["/Users/jaredcortez/kappa-falcon/kappa-falcon/ClientApp/src/app/home/home.component.ts","/Users/jaredcortez/kappa-falcon/kappa-falcon/ClientApp/src/app/home/home.component.html"],"sourcesContent":["import { Component, EventEmitter, Input, OnDestroy, OnInit, Output } from '@angular/core';\nimport { lastValueFrom, Subscription } from 'rxjs';\nimport { UploadFileService } from '../services/upload-file.service';\nimport { SendFileService } from '../services/send-file.service';\nimport { HttpClient } from \"@angular/common/http\";\nimport { throwError } from \"rxjs\";\n\n@Component({\n  selector: 'app-home',\n  templateUrl: './home.component.html',\n  styleUrls: ['./home.component.css'],\n})\nexport class HomeComponent {\n  // @Input() acceptedFormat: string = '.pdf';\n  // @Input() maxSize: number = 102400;\n  // @Output() onSendFilesList: EventEmitter<FileItem[]> = new EventEmitter<\n  //   FileItem[]\n  // >();\n  // filesList = [];\n  // uploadedFiles: any = [];\n  // currentFolder: any = \"\";\n\n  // message: any;\n  // subscription: Subscription = new Subscription;\n\n  // constructor(private uploadFileService: UploadFileService, private data: SendFileService) { }\n  // ngOnInit() {\n  //   this.subscription = this.data.currentMessage.subscribe((message: any) => this.message = message)\n  // }\n\n  // ngOnDestroy(): void {\n  //   this.subscription.unsubscribe();\n  // }\n\n  // async UploadFiles(files: any) {\n  //   const folderHolder: any = {};\n  //   this.uploadedFiles = [];\n\n  //   let file: any;\n  //   for (file of Array.from(files)) {\n  //     // console.log(file['webkitRelativePath'], file['size'], file['type']);\n  //     const path: string = file['webkitRelativePath'];\n  //     const pathPieces: any = path.split('/');\n\n  //     if (!pathPieces.reverse()[0].startsWith('.')) {\n  //       this.currentFolder = pathPieces[1];\n  //       // console.log('Checking for folder ', currentFolder, 'in', folderHolder);\n  //       if (folderHolder[this.currentFolder]) {\n  //         const b = await lastValueFrom(\n  //           this.uploadFileService.uploadFile(folderHolder[this.currentFolder], file)\n  //         );\n  //         this.uploadedFiles.push({\n  //           fileName: pathPieces[0],\n  //           folder: this.currentFolder,\n  //           folderId: folderHolder[this.currentFolder],\n  //         });\n  //       } else {\n  //         const folderId = await lastValueFrom(\n  //           this.uploadFileService.createFolder(this.currentFolder)\n  //         );\n  //         folderHolder[this.currentFolder] = folderId;\n\n  //         const p = await lastValueFrom(\n  //           this.uploadFileService.uploadFile(folderHolder[this.currentFolder], file)\n  //         );\n  //         this.uploadedFiles.push({\n  //           fileName: pathPieces[0],\n  //           folder: this.currentFolder,\n  //           folderId: folderHolder[this.currentFolder],\n  //         });\n  //       }\n  //     }\n  //   }\n  //   console.log(this.uploadedFiles);\n  // }\n  // newMessage() {\n  //   this.data.changeMessage(this.uploadedFiles);\n  // }\n  status: \"initial\" | \"uploading\" | \"success\" | \"fail\" = \"initial\";\n  files: File[] = [];\n\n  constructor(private http: HttpClient) {}\n\n  ngOnInit(): void {}\n\n  onChange(event: any) {\n    const files = event.target.files;\n\n    if (files.length) {\n      this.status = \"initial\";\n      this.files = files;\n    }\n  }\n\n  onUpload() {\n    if (this.files.length) {\n      const formData = new FormData();\n\n      [...this.files].forEach((file) => {\n        formData.append(\"file\", file, file.name);\n      });\n\n      const upload$ = this.http.post(\"https://httpbin.com/post\", formData);\n\n      this.status = \"uploading\";\n\n      upload$.subscribe({\n        next: () => {\n          this.status = \"success\";\n        },\n        error: (error: any) => {\n          this.status = \"fail\";\n          return throwError(() => error);\n        },\n      });\n    }\n  }\n}\n\nexport class FileItem {\n  name: string = \"\";\n  size: number = 0;\n  type: string = \"\";\n}\n","<!-- <input\n  id=\"1-basic\"\n  type=\"file\"\n  #file_input\n  (change)=\"UploadFiles(file_input.files)\"\n  webkitdirectory\n  multiple\n/>\n<div style=\"width: 80%; margin-top: 30px\">\n  <ng-container *ngIf=\"uploadedFiles?.length\">\n    Directory selected: {{ currentFolder }}.\n  </ng-container>\n</div> -->\n\n<!-- <button\n  type=\"button\"\n  class=\"nav-item nav-link\"\n  [routerLink]=\"['/user']\"\n  (click)=\"newMessage()\"\n>\n  Test\n</button> -->\n\n<!-- <button type=\"button\" (click)=\"test(uploadedFiles)\">Upload</button> -->\n\n<div>\n  <input\n    type=\"file\"\n    (change)=\"handleFolderUpload($event)\"\n    webkitdirectory\n    directory\n    multiple\n  />\n</div>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}