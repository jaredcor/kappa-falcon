{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nlet HomeComponent = class HomeComponent {\n  constructor(http) {\n    this.http = http;\n    // @Input() acceptedFormat: string = '.pdf';\n    // @Input() maxSize: number = 102400;\n    // @Output() onSendFilesList: EventEmitter<FileItem[]> = new EventEmitter<\n    //   FileItem[]\n    // >();\n    // filesList = [];\n    // uploadedFiles: any = [];\n    // currentFolder: any = \"\";\n    // message: any;\n    // subscription: Subscription = new Subscription;\n    // constructor(private uploadFileService: UploadFileService, private data: SendFileService) { }\n    // ngOnInit() {\n    //   this.subscription = this.data.currentMessage.subscribe((message: any) => this.message = message)\n    // }\n    // ngOnDestroy(): void {\n    //   this.subscription.unsubscribe();\n    // }\n    // async UploadFiles(files: any) {\n    //   const folderHolder: any = {};\n    //   this.uploadedFiles = [];\n    //   let file: any;\n    //   for (file of Array.from(files)) {\n    //     // console.log(file['webkitRelativePath'], file['size'], file['type']);\n    //     const path: string = file['webkitRelativePath'];\n    //     const pathPieces: any = path.split('/');\n    //     if (!pathPieces.reverse()[0].startsWith('.')) {\n    //       this.currentFolder = pathPieces[1];\n    //       // console.log('Checking for folder ', currentFolder, 'in', folderHolder);\n    //       if (folderHolder[this.currentFolder]) {\n    //         const b = await lastValueFrom(\n    //           this.uploadFileService.uploadFile(folderHolder[this.currentFolder], file)\n    //         );\n    //         this.uploadedFiles.push({\n    //           fileName: pathPieces[0],\n    //           folder: this.currentFolder,\n    //           folderId: folderHolder[this.currentFolder],\n    //         });\n    //       } else {\n    //         const folderId = await lastValueFrom(\n    //           this.uploadFileService.createFolder(this.currentFolder)\n    //         );\n    //         folderHolder[this.currentFolder] = folderId;\n    //         const p = await lastValueFrom(\n    //           this.uploadFileService.uploadFile(folderHolder[this.currentFolder], file)\n    //         );\n    //         this.uploadedFiles.push({\n    //           fileName: pathPieces[0],\n    //           folder: this.currentFolder,\n    //           folderId: folderHolder[this.currentFolder],\n    //         });\n    //       }\n    //     }\n    //   }\n    //   console.log(this.uploadedFiles);\n    // }\n    // newMessage() {\n    //   this.data.changeMessage(this.uploadedFiles);\n    // }\n    this.fileName = '';\n  }\n  onFileSelected(event) {\n    const file = event.target.files[0];\n    if (file) {\n      this.fileName = file.name;\n      const formData = new FormData();\n      formData.append(\"thumbnail\", file);\n      const upload$ = this.http.post(\"/api/thumbnail-upload\", formData);\n      upload$.subscribe();\n    }\n  }\n};\nHomeComponent = __decorate([Component({\n  selector: 'app-home',\n  templateUrl: './home.component.html',\n  styleUrls: ['./home.component.css']\n})], HomeComponent);\nexport { HomeComponent };\nexport class FileItem {\n  constructor() {\n    this.name = \"\";\n    this.size = 0;\n    this.type = \"\";\n  }\n}","map":{"version":3,"mappings":";AAAA,SAASA,SAAS,QAAwD,eAAe;AAUlF,IAAMC,aAAa,GAAnB,MAAMA,aAAa;EAoExBC,YAAoBC,IAAgB;IAAhB,SAAI,GAAJA,IAAI;IAnExB;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IAEA;IACA;IAEA;IACA;IACA;IACA;IAEA;IACA;IACA;IAEA;IACA;IACA;IAEA;IACA;IACA;IACA;IACA;IAEA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IAEA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA,aAAQ,GAAG,EAAE;EAE0B;EAEvCC,cAAc,CAACC,KAAK;IAElB,MAAMC,IAAI,GAAQD,KAAK,CAACE,MAAM,CAACC,KAAK,CAAC,CAAC,CAAC;IAErC,IAAIF,IAAI,EAAE;MAER,IAAI,CAACG,QAAQ,GAAGH,IAAI,CAACI,IAAI;MAEzB,MAAMC,QAAQ,GAAG,IAAIC,QAAQ,EAAE;MAE/BD,QAAQ,CAACE,MAAM,CAAC,WAAW,EAAEP,IAAI,CAAC;MAElC,MAAMQ,OAAO,GAAG,IAAI,CAACX,IAAI,CAACY,IAAI,CAAC,uBAAuB,EAAEJ,QAAQ,CAAC;MAEjEG,OAAO,CAACE,SAAS,EAAE;;EAEzB;CACD;AAvFYf,aAAa,eALzBD,SAAS,CAAC;EACTiB,QAAQ,EAAE,UAAU;EACpBC,WAAW,EAAE,uBAAuB;EACpCC,SAAS,EAAE,CAAC,sBAAsB;CACnC,CAAC,GACWlB,aAAa,CAuFzB;SAvFYA,aAAa;AAyF1B,OAAM,MAAOmB,QAAQ;EAArBlB;IACE,SAAI,GAAW,EAAE;IACjB,SAAI,GAAW,CAAC;IAChB,SAAI,GAAW,EAAE;EACnB","names":["Component","HomeComponent","constructor","http","onFileSelected","event","file","target","files","fileName","name","formData","FormData","append","upload$","post","subscribe","selector","templateUrl","styleUrls","FileItem"],"sourceRoot":"","sources":["/Users/jaredcortez/kappa-falcon/kappa-falcon/ClientApp/src/app/home/home.component.ts"],"sourcesContent":["import { Component, EventEmitter, Input, OnDestroy, OnInit, Output } from '@angular/core';\nimport { lastValueFrom, Subscription } from 'rxjs';\nimport { UploadFileService } from '../services/upload-file.service';\nimport { SendFileService } from '../services/send-file.service';\n\n@Component({\n  selector: 'app-home',\n  templateUrl: './home.component.html',\n  styleUrls: ['./home.component.css'],\n})\nexport class HomeComponent {\n  // @Input() acceptedFormat: string = '.pdf';\n  // @Input() maxSize: number = 102400;\n  // @Output() onSendFilesList: EventEmitter<FileItem[]> = new EventEmitter<\n  //   FileItem[]\n  // >();\n  // filesList = [];\n  // uploadedFiles: any = [];\n  // currentFolder: any = \"\";\n\n  // message: any;\n  // subscription: Subscription = new Subscription;\n\n  // constructor(private uploadFileService: UploadFileService, private data: SendFileService) { }\n  // ngOnInit() {\n  //   this.subscription = this.data.currentMessage.subscribe((message: any) => this.message = message)\n  // }\n\n  // ngOnDestroy(): void {\n  //   this.subscription.unsubscribe();\n  // }\n\n  // async UploadFiles(files: any) {\n  //   const folderHolder: any = {};\n  //   this.uploadedFiles = [];\n\n  //   let file: any;\n  //   for (file of Array.from(files)) {\n  //     // console.log(file['webkitRelativePath'], file['size'], file['type']);\n  //     const path: string = file['webkitRelativePath'];\n  //     const pathPieces: any = path.split('/');\n\n  //     if (!pathPieces.reverse()[0].startsWith('.')) {\n  //       this.currentFolder = pathPieces[1];\n  //       // console.log('Checking for folder ', currentFolder, 'in', folderHolder);\n  //       if (folderHolder[this.currentFolder]) {\n  //         const b = await lastValueFrom(\n  //           this.uploadFileService.uploadFile(folderHolder[this.currentFolder], file)\n  //         );\n  //         this.uploadedFiles.push({\n  //           fileName: pathPieces[0],\n  //           folder: this.currentFolder,\n  //           folderId: folderHolder[this.currentFolder],\n  //         });\n  //       } else {\n  //         const folderId = await lastValueFrom(\n  //           this.uploadFileService.createFolder(this.currentFolder)\n  //         );\n  //         folderHolder[this.currentFolder] = folderId;\n\n  //         const p = await lastValueFrom(\n  //           this.uploadFileService.uploadFile(folderHolder[this.currentFolder], file)\n  //         );\n  //         this.uploadedFiles.push({\n  //           fileName: pathPieces[0],\n  //           folder: this.currentFolder,\n  //           folderId: folderHolder[this.currentFolder],\n  //         });\n  //       }\n  //     }\n  //   }\n  //   console.log(this.uploadedFiles);\n  // }\n  // newMessage() {\n  //   this.data.changeMessage(this.uploadedFiles);\n  // }\n  fileName = '';\n\n  constructor(private http: HttpClient) {}\n\n  onFileSelected(event) {\n\n    const file:File = event.target.files[0];\n\n      if (file) {\n\n        this.fileName = file.name;\n\n        const formData = new FormData();\n\n        formData.append(\"thumbnail\", file);\n\n        const upload$ = this.http.post(\"/api/thumbnail-upload\", formData);\n\n        upload$.subscribe();\n      }\n  }\n}\n\nexport class FileItem {\n  name: string = \"\";\n  size: number = 0;\n  type: string = \"\";\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}