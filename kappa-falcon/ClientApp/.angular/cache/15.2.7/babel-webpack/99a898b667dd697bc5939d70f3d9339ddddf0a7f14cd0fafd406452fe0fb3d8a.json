{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"../services/upload.service\";\nexport class HomeComponent {\n  constructor(uploadService) {\n    this.uploadService = uploadService;\n    // @Input() acceptedFormat: string = '.pdf';\n    // @Input() maxSize: number = 102400;\n    // @Output() onSendFilesList: EventEmitter<FileItem[]> = new EventEmitter<\n    //   FileItem[]\n    // >();\n    // filesList = [];\n    // uploadedFiles: any = [];\n    // currentFolder: any = \"\";\n    // message: any;\n    // subscription: Subscription = new Subscription;\n    // constructor(private uploadFileService: UploadFileService, private data: SendFileService) { }\n    // ngOnInit() {\n    //   this.subscription = this.data.currentMessage.subscribe((message: any) => this.message = message)\n    // }\n    // ngOnDestroy(): void {\n    //   this.subscription.unsubscribe();\n    // }\n    // async UploadFiles(files: any) {\n    //   const folderHolder: any = {};\n    //   this.uploadedFiles = [];\n    //   let file: any;\n    //   for (file of Array.from(files)) {\n    //     // console.log(file['webkitRelativePath'], file['size'], file['type']);\n    //     const path: string = file['webkitRelativePath'];\n    //     const pathPieces: any = path.split('/');\n    //     if (!pathPieces.reverse()[0].startsWith('.')) {\n    //       this.currentFolder = pathPieces[1];\n    //       // console.log('Checking for folder ', currentFolder, 'in', folderHolder);\n    //       if (folderHolder[this.currentFolder]) {\n    //         const b = await lastValueFrom(\n    //           this.uploadFileService.uploadFile(folderHolder[this.currentFolder], file)\n    //         );\n    //         this.uploadedFiles.push({\n    //           fileName: pathPieces[0],\n    //           folder: this.currentFolder,\n    //           folderId: folderHolder[this.currentFolder],\n    //         });\n    //       } else {\n    //         const folderId = await lastValueFrom(\n    //           this.uploadFileService.createFolder(this.currentFolder)\n    //         );\n    //         folderHolder[this.currentFolder] = folderId;\n    //         const p = await lastValueFrom(\n    //           this.uploadFileService.uploadFile(folderHolder[this.currentFolder], file)\n    //         );\n    //         this.uploadedFiles.push({\n    //           fileName: pathPieces[0],\n    //           folder: this.currentFolder,\n    //           folderId: folderHolder[this.currentFolder],\n    //         });\n    //       }\n    //     }\n    //   }\n    //   console.log(this.uploadedFiles);\n    // }\n    // newMessage() {\n    //   this.data.changeMessage(this.uploadedFiles);\n    // }\n    this.file = null;\n  }\n  onFilechange(event) {\n    console.log(event.target.files[0]);\n    this.file = event.target.files[0];\n  }\n  upload() {\n    if (this.file) {\n      this.uploadService.uploadfile(this.file).subscribe(resp => {\n        alert(\"Uploaded\");\n      });\n    } else {\n      alert(\"Please select a file first\");\n    }\n  }\n}\nHomeComponent.ɵfac = function HomeComponent_Factory(t) {\n  return new (t || HomeComponent)(i0.ɵɵdirectiveInject(i1.UploadService));\n};\nHomeComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: HomeComponent,\n  selectors: [[\"app-home\"]],\n  decls: 9,\n  vars: 0,\n  consts: [[1, \"container\"], [1, \"row\", \"mt-5\"], [1, \"col-md-4\"], [1, \"mb-3\"], [\"for\", \"formFile\", 1, \"form-label\"], [\"type\", \"file\", \"id\", \"formFile\", \"multiple\", \"\", \"webkitdirectory\", \"\", \"directory\", \"\", 1, \"form-control\", 3, \"change\"], [\"type\", \"button\", 1, \"btn\", \"btn-primary\", \"mt-3\", 3, \"click\"]],\n  template: function HomeComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1)(2, \"div\", 2)(3, \"div\", 3)(4, \"label\", 4);\n      i0.ɵɵtext(5, \"Upload file example\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(6, \"input\", 5);\n      i0.ɵɵlistener(\"change\", function HomeComponent_Template_input_change_6_listener($event) {\n        return ctx.onFilechange($event);\n      });\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(7, \"button\", 6);\n      i0.ɵɵlistener(\"click\", function HomeComponent_Template_button_click_7_listener() {\n        return ctx.upload();\n      });\n      i0.ɵɵtext(8, \" Upload \");\n      i0.ɵɵelementEnd()()()()();\n    }\n  },\n  styles: [\"\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n});\nexport class FileItem {\n  constructor() {\n    this.name = \"\";\n    this.size = 0;\n    this.type = \"\";\n  }\n}","map":{"version":3,"mappings":";;AAaA,OAAM,MAAOA,aAAa;EAoEzBC,YACUC,aAA4B;IAA5B,kBAAa,GAAbA,aAAa;IApEtB;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IAEA;IACA;IAEA;IACA;IACA;IACA;IAEA;IACA;IACA;IAEA;IACA;IACA;IAEA;IACA;IACA;IACA;IACA;IAEA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IAEA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACF,SAAI,GAAQ,IAAI;EAMf;EAEAC,YAAY,CAACC,KAAU;IACrBC,OAAO,CAACC,GAAG,CAACF,KAAK,CAACG,MAAM,CAACC,KAAK,CAAC,CAAC,CAAC,CAAC;IAClC,IAAI,CAACC,IAAI,GAAGL,KAAK,CAACG,MAAM,CAACC,KAAK,CAAC,CAAC,CAAC;EACnC;EAEAE,MAAM;IACJ,IAAI,IAAI,CAACD,IAAI,EAAE;MACb,IAAI,CAACP,aAAa,CAACS,UAAU,CAAC,IAAI,CAACF,IAAI,CAAC,CAACG,SAAS,CAACC,IAAI,IAAG;QACxDC,KAAK,CAAC,UAAU,CAAC;MACnB,CAAC,CAAC;KACH,MAAM;MACLA,KAAK,CAAC,4BAA4B,CAAC;;EAEvC;;AAvFYd,aAAa;mBAAbA,aAAa;AAAA;AAAbA,aAAa;QAAbA,aAAa;EAAAe;EAAAC;EAAAC;EAAAC;EAAAC;IAAA;MCY1BC,8BAAuB;MAI0BA,mCAAmB;MAAAA,iBAAQ;MACpEA,gCAQE;MAPAA;QAAA,OAAUC,wBAAyB;MAAA,EAAC;MADtCD,iBAQE;MACFA,iCAIC;MAHCA;QAAA,OAASC,YAAa;MAAA,EAAC;MAIvBD,wBACF;MAAAA,iBAAS;;;;;AD0DjB,OAAM,MAAOE,QAAQ;EAArBrB;IACE,SAAI,GAAW,EAAE;IACjB,SAAI,GAAW,CAAC;IAChB,SAAI,GAAW,EAAE;EACnB","names":["HomeComponent","constructor","uploadService","onFilechange","event","console","log","target","files","file","upload","uploadfile","subscribe","resp","alert","selectors","decls","vars","consts","template","i0","ctx","FileItem"],"sourceRoot":"","sources":["/Users/jaredcortez/kappa-falcon/kappa-falcon/ClientApp/src/app/home/home.component.ts","/Users/jaredcortez/kappa-falcon/kappa-falcon/ClientApp/src/app/home/home.component.html"],"sourcesContent":["import { Component, EventEmitter, Input, OnDestroy, OnInit, Output } from '@angular/core';\nimport { lastValueFrom, Subscription } from 'rxjs';\nimport { UploadFileService } from '../services/upload-file.service';\nimport { SendFileService } from '../services/send-file.service';\nimport { HttpClient } from \"@angular/common/http\";\nimport { throwError } from \"rxjs\";\nimport { UploadService } from '../services/upload.service';\n\n@Component({\n  selector: 'app-home',\n  templateUrl: './home.component.html',\n  styleUrls: ['./home.component.css'],\n})\nexport class HomeComponent {\n  // @Input() acceptedFormat: string = '.pdf';\n  // @Input() maxSize: number = 102400;\n  // @Output() onSendFilesList: EventEmitter<FileItem[]> = new EventEmitter<\n  //   FileItem[]\n  // >();\n  // filesList = [];\n  // uploadedFiles: any = [];\n  // currentFolder: any = \"\";\n\n  // message: any;\n  // subscription: Subscription = new Subscription;\n\n  // constructor(private uploadFileService: UploadFileService, private data: SendFileService) { }\n  // ngOnInit() {\n  //   this.subscription = this.data.currentMessage.subscribe((message: any) => this.message = message)\n  // }\n\n  // ngOnDestroy(): void {\n  //   this.subscription.unsubscribe();\n  // }\n\n  // async UploadFiles(files: any) {\n  //   const folderHolder: any = {};\n  //   this.uploadedFiles = [];\n\n  //   let file: any;\n  //   for (file of Array.from(files)) {\n  //     // console.log(file['webkitRelativePath'], file['size'], file['type']);\n  //     const path: string = file['webkitRelativePath'];\n  //     const pathPieces: any = path.split('/');\n\n  //     if (!pathPieces.reverse()[0].startsWith('.')) {\n  //       this.currentFolder = pathPieces[1];\n  //       // console.log('Checking for folder ', currentFolder, 'in', folderHolder);\n  //       if (folderHolder[this.currentFolder]) {\n  //         const b = await lastValueFrom(\n  //           this.uploadFileService.uploadFile(folderHolder[this.currentFolder], file)\n  //         );\n  //         this.uploadedFiles.push({\n  //           fileName: pathPieces[0],\n  //           folder: this.currentFolder,\n  //           folderId: folderHolder[this.currentFolder],\n  //         });\n  //       } else {\n  //         const folderId = await lastValueFrom(\n  //           this.uploadFileService.createFolder(this.currentFolder)\n  //         );\n  //         folderHolder[this.currentFolder] = folderId;\n\n  //         const p = await lastValueFrom(\n  //           this.uploadFileService.uploadFile(folderHolder[this.currentFolder], file)\n  //         );\n  //         this.uploadedFiles.push({\n  //           fileName: pathPieces[0],\n  //           folder: this.currentFolder,\n  //           folderId: folderHolder[this.currentFolder],\n  //         });\n  //       }\n  //     }\n  //   }\n  //   console.log(this.uploadedFiles);\n  // }\n  // newMessage() {\n  //   this.data.changeMessage(this.uploadedFiles);\n  // }\nfile: any = null;\n \n constructor(\n   private uploadService: UploadService\n ){\n \n }\n \n onFilechange(event: any) {\n   console.log(event.target.files[0])\n   this.file = event.target.files[0]\n }\n \n upload() {\n   if (this.file) {\n     this.uploadService.uploadfile(this.file).subscribe(resp => {\n       alert(\"Uploaded\")\n     })\n   } else {\n     alert(\"Please select a file first\")\n   }\n }\n}\n\nexport class FileItem {\n  name: string = \"\";\n  size: number = 0;\n  type: string = \"\";\n}\n","<!-- <input\n  id=\"1-basic\"\n  type=\"file\"\n  #file_input\n  (change)=\"UploadFiles(file_input.files)\"\n  webkitdirectory\n  multiple\n/>\n<div style=\"width: 80%; margin-top: 30px\">\n  <ng-container *ngIf=\"uploadedFiles?.length\">\n    Directory selected: {{ currentFolder }}.\n  </ng-container>\n</div> -->\n\n<!-- <button\n  type=\"button\"\n  class=\"nav-item nav-link\"\n  [routerLink]=\"['/user']\"\n  (click)=\"newMessage()\"\n>\n  Test\n</button> -->\n\n<!-- <button type=\"button\" (click)=\"test(uploadedFiles)\">Upload</button> -->\n\n<div class=\"container\">\n  <div class=\"row mt-5\">\n    <div class=\"col-md-4\">\n      <div class=\"mb-3\">\n        <label for=\"formFile\" class=\"form-label\">Upload file example</label>\n        <input\n          (change)=\"this.onFilechange($event)\"\n          class=\"form-control\"\n          type=\"file\"\n          id=\"formFile\"\n          multiple\n          webkitdirectory\n          directory\n        />\n        <button\n          (click)=\"this.upload()\"\n          type=\"button\"\n          class=\"btn btn-primary mt-3\"\n        >\n          Upload\n        </button>\n      </div>\n    </div>\n  </div>\n</div>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}