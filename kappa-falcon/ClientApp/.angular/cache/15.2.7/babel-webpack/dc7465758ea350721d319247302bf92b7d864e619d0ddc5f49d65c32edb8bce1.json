{"ast":null,"code":"import _asyncToGenerator from \"/Users/jaredcortez/kappa-falcon/kappa-falcon/ClientApp/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { EventEmitter } from '@angular/core';\nimport { lastValueFrom, Subscription } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../services/upload-file.service\";\nimport * as i2 from \"../services/send-file.service\";\nexport class HomeComponent {\n  constructor(uploadFileService, data) {\n    this.uploadFileService = uploadFileService;\n    this.data = data;\n    this.acceptedFormat = '.pdf';\n    this.maxSize = 102400;\n    this.onSendFilesList = new EventEmitter();\n    // filesList = [];\n    this.uploadedFiles = [];\n    this.currentFolder = \"\";\n    this.subscription = new Subscription();\n  }\n  ngOnInit() {\n    this.subscription = this.data.currentMessage.subscribe(message => this.message = message);\n  }\n  ngOnDestroy() {\n    this.subscription.unsubscribe();\n  }\n  UploadFiles(files) {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      const folderHolder = {};\n      _this.uploadedFiles = [];\n      let file;\n      for (file of Array.from(files)) {\n        // console.log(file['webkitRelativePath'], file['size'], file['type']);\n        const path = file['webkitRelativePath'];\n        const pathPieces = path.split('/');\n        if (!pathPieces.reverse()[0].startsWith('.')) {\n          _this.currentFolder = pathPieces[1];\n          // console.log('Checking for folder ', currentFolder, 'in', folderHolder);\n          if (folderHolder[_this.currentFolder]) {\n            const b = yield lastValueFrom(_this.uploadFileService.uploadFile(folderHolder[_this.currentFolder], file));\n            _this.uploadedFiles.push({\n              fileName: pathPieces[0],\n              folder: _this.currentFolder,\n              folderId: folderHolder[_this.currentFolder]\n            });\n          } else {\n            const folderId = yield lastValueFrom(_this.uploadFileService.createFolder(_this.currentFolder));\n            folderHolder[_this.currentFolder] = folderId;\n            const p = yield lastValueFrom(_this.uploadFileService.uploadFile(folderHolder[_this.currentFolder], file));\n            _this.uploadedFiles.push({\n              fileName: pathPieces[0],\n              folder: _this.currentFolder,\n              folderId: folderHolder[_this.currentFolder]\n            });\n          }\n        }\n      }\n      console.log(_this.uploadedFiles);\n    })();\n  }\n  newMessage() {\n    this.data.changeMessage(this.uploadedFiles);\n  }\n  test(event) {\n    console.log(event.target.files[0]);\n  }\n}\nHomeComponent.ɵfac = function HomeComponent_Factory(t) {\n  return new (t || HomeComponent)(i0.ɵɵdirectiveInject(i1.UploadFileService), i0.ɵɵdirectiveInject(i2.SendFileService));\n};\nHomeComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: HomeComponent,\n  selectors: [[\"app-home\"]],\n  inputs: {\n    acceptedFormat: \"acceptedFormat\",\n    maxSize: \"maxSize\"\n  },\n  outputs: {\n    onSendFilesList: \"onSendFilesList\"\n  },\n  decls: 1,\n  vars: 0,\n  consts: [[\"type\", \"file\", \"onchange\", \"console.log(event.target.files)\", \"multiple\", \"\", \"webkitdirectory\", \"\", 1, \"file-upload\"]],\n  template: function HomeComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelement(0, \"input\", 0);\n    }\n  },\n  styles: [\"\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n});\nexport class FileItem {\n  constructor() {\n    this.name = \"\";\n    this.size = 0;\n    this.type = \"\";\n  }\n}","map":{"version":3,"mappings":"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","names":["EventEmitter","lastValueFrom","Subscription","HomeComponent","constructor","uploadFileService","data","ngOnInit","subscription","currentMessage","subscribe","message","ngOnDestroy","unsubscribe","UploadFiles","files","folderHolder","uploadedFiles","file","Array","from","path","pathPieces","split","reverse","startsWith","currentFolder","b","uploadFile","push","fileName","folder","folderId","createFolder","p","console","log","newMessage","changeMessage","test","event","target","selectors","inputs","acceptedFormat","maxSize","outputs","onSendFilesList","decls","vars","consts","template","i0","FileItem"],"sourceRoot":"","sources":["/Users/jaredcortez/kappa-falcon/kappa-falcon/ClientApp/src/app/home/home.component.ts","/Users/jaredcortez/kappa-falcon/kappa-falcon/ClientApp/src/app/home/home.component.html"],"sourcesContent":["import { Component, EventEmitter, Input, OnDestroy, OnInit, Output } from '@angular/core';\nimport { lastValueFrom, Subscription } from 'rxjs';\nimport { UploadFileService } from '../services/upload-file.service';\nimport { SendFileService } from '../services/send-file.service';\n\n@Component({\n  selector: 'app-home',\n  templateUrl: './home.component.html',\n  styleUrls: ['./home.component.css'],\n})\nexport class HomeComponent implements OnInit, OnDestroy {\n  @Input() acceptedFormat: string = '.pdf';\n  @Input() maxSize: number = 102400;\n  @Output() onSendFilesList: EventEmitter<FileItem[]> = new EventEmitter<\n    FileItem[]\n  >();\n  // filesList = [];\n  uploadedFiles: any = [];\n  currentFolder: any = \"\";\n\n  message: any;\n  subscription: Subscription = new Subscription;\n\n  constructor(private uploadFileService: UploadFileService, private data: SendFileService) { }\n  ngOnInit() {\n    this.subscription = this.data.currentMessage.subscribe((message: any) => this.message = message)\n  }\n\n  ngOnDestroy(): void {\n    this.subscription.unsubscribe();\n  }\n\n  async UploadFiles(files: any) {\n    const folderHolder: any = {};\n    this.uploadedFiles = [];\n\n    let file: any;\n    for (file of Array.from(files)) {\n      // console.log(file['webkitRelativePath'], file['size'], file['type']);\n      const path: string = file['webkitRelativePath'];\n      const pathPieces: any = path.split('/');\n\n      if (!pathPieces.reverse()[0].startsWith('.')) {\n        this.currentFolder = pathPieces[1];\n        // console.log('Checking for folder ', currentFolder, 'in', folderHolder);\n        if (folderHolder[this.currentFolder]) {\n          const b = await lastValueFrom(\n            this.uploadFileService.uploadFile(folderHolder[this.currentFolder], file)\n          );\n          this.uploadedFiles.push({\n            fileName: pathPieces[0],\n            folder: this.currentFolder,\n            folderId: folderHolder[this.currentFolder],\n          });\n        } else {\n          const folderId = await lastValueFrom(\n            this.uploadFileService.createFolder(this.currentFolder)\n          );\n          folderHolder[this.currentFolder] = folderId;\n\n          const p = await lastValueFrom(\n            this.uploadFileService.uploadFile(folderHolder[this.currentFolder], file)\n          );\n          this.uploadedFiles.push({\n            fileName: pathPieces[0],\n            folder: this.currentFolder,\n            folderId: folderHolder[this.currentFolder],\n          });\n        }\n      }\n    }\n    console.log(this.uploadedFiles);\n  }\n  newMessage() {\n    this.data.changeMessage(this.uploadedFiles);\n  }\n  test(event: any) {\n    console.log(event.target.files[0]);\n  }\n}\n\nexport class FileItem {\n  name: string = \"\";\n  size: number = 0;\n  type: string = \"\";\n}\n","<!-- <input\n  id=\"1-basic\"\n  type=\"file\"\n  #file_input\n  (change)=\"UploadFiles(file_input.files)\"\n  webkitdirectory\n  multiple\n/>\n<div style=\"width: 80%; margin-top: 30px\">\n  <ng-container *ngIf=\"uploadedFiles?.length\">\n    Directory selected: {{ currentFolder }}.\n  </ng-container>\n</div> -->\n\n<!-- <button\n  type=\"button\"\n  class=\"nav-item nav-link\"\n  [routerLink]=\"['/user']\"\n  (click)=\"newMessage()\"\n>\n  Test\n</button> -->\n\n<!-- <button type=\"button\" (click)=\"test(uploadedFiles)\">Upload</button> -->\n<input\n  type=\"file\"\n  class=\"file-upload\"\n  onchange=\"console.log(event.target.files)\"\n  multiple\n  webkitdirectory\n/>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}