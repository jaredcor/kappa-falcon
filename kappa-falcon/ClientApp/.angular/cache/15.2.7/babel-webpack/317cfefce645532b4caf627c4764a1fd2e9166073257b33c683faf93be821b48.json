{"ast":null,"code":"import _asyncToGenerator from \"/Users/jaredcortez/kappa-falcon/kappa-falcon/ClientApp/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { EventEmitter } from '@angular/core';\nimport { lastValueFrom } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../services/upload-file.service\";\nimport * as i2 from \"@angular/common\";\nfunction HomeComponent_ng_container_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainer(0);\n  }\n}\nfunction HomeComponent_tr_14_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"tr\", 7)(1, \"th\");\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"td\");\n    i0.ɵɵtext(4);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(5, \"td\");\n    i0.ɵɵtext(6);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const file_r5 = ctx.$implicit;\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(file_r5 == null ? null : file_r5.fileName);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(file_r5 == null ? null : file_r5.folder);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(file_r5 == null ? null : file_r5.folderId);\n  }\n}\nfunction HomeComponent_ng_template_15_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵtext(0, \" No files \");\n  }\n}\nexport class HomeComponent {\n  constructor(uploadFileService) {\n    this.uploadFileService = uploadFileService;\n    this.acceptedFormat = '.pdf';\n    this.maxSize = 102400;\n    this.onSendFilesList = new EventEmitter();\n    // filesList = [];\n    this.uploadedFiles = [];\n  }\n  ngOnInit() {}\n  uploadFiles(files) {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      const folderHolder = {};\n      _this.uploadedFiles = [];\n      let file;\n      for (file of Array.from(files)) {\n        // console.log(file['webkitRelativePath'], file['size'], file['type']);\n        const path = file['webkitRelativePath'];\n        const pathPieces = path.split('/');\n        if (!pathPieces.reverse()[0].startsWith('.')) {\n          const currentFolder = pathPieces[1];\n          // console.log('Checking for folder ', currentFolder, 'in', folderHolder);\n          if (folderHolder[currentFolder]) {\n            const b = yield lastValueFrom(_this.uploadFileService.uploadFile(folderHolder[currentFolder], file));\n            _this.uploadedFiles.push({\n              fileName: pathPieces[0],\n              folder: currentFolder,\n              folderId: folderHolder[currentFolder]\n            });\n          } else {\n            const folderId = yield lastValueFrom(_this.uploadFileService.createFolder(currentFolder));\n            folderHolder[currentFolder] = folderId;\n            const p = yield lastValueFrom(_this.uploadFileService.uploadFile(folderHolder[currentFolder], file));\n            _this.uploadedFiles.push({\n              fileName: pathPieces[0],\n              folder: currentFolder,\n              folderId: folderHolder[currentFolder]\n            });\n          }\n        }\n      }\n      // console.log(this.uploadedFiles);\n    })();\n  }\n}\n\nHomeComponent.ɵfac = function HomeComponent_Factory(t) {\n  return new (t || HomeComponent)(i0.ɵɵdirectiveInject(i1.UploadFileService));\n};\nHomeComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: HomeComponent,\n  selectors: [[\"app-home\"]],\n  inputs: {\n    acceptedFormat: \"acceptedFormat\",\n    maxSize: \"maxSize\"\n  },\n  outputs: {\n    onSendFilesList: \"onSendFilesList\"\n  },\n  decls: 17,\n  vars: 3,\n  consts: [[\"id\", \"1-basic\", \"type\", \"file\", \"webkitdirectory\", \"\", \"multiple\", \"\", 3, \"change\"], [\"fileInput\", \"\"], [2, \"width\", \"80%\", \"margin-top\", \"30px\"], [4, \"ngIf\", \"ngIfElse\"], [2, \"width\", \"100%\"], [\"style\", \"text-align: center\", 4, \"ngFor\", \"ngForOf\"], [\"noFiles\", \"\"], [2, \"text-align\", \"center\"]],\n  template: function HomeComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      const _r6 = i0.ɵɵgetCurrentView();\n      i0.ɵɵelementStart(0, \"input\", 0, 1);\n      i0.ɵɵlistener(\"change\", function HomeComponent_Template_input_change_0_listener() {\n        i0.ɵɵrestoreView(_r6);\n        const _r0 = i0.ɵɵreference(1);\n        return i0.ɵɵresetView(ctx.uploadFiles(_r0.files));\n      });\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(2, \"div\", 2);\n      i0.ɵɵtemplate(3, HomeComponent_ng_container_3_Template, 1, 0, \"ng-container\", 3);\n      i0.ɵɵelementStart(4, \"table\", 4)(5, \"thead\")(6, \"tr\")(7, \"th\");\n      i0.ɵɵtext(8, \"File name\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(9, \"th\");\n      i0.ɵɵtext(10, \"Folder\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(11, \"th\");\n      i0.ɵɵtext(12, \"Id Folder\");\n      i0.ɵɵelementEnd()()();\n      i0.ɵɵelementStart(13, \"tbody\");\n      i0.ɵɵtemplate(14, HomeComponent_tr_14_Template, 7, 3, \"tr\", 5);\n      i0.ɵɵelementEnd()();\n      i0.ɵɵtemplate(15, HomeComponent_ng_template_15_Template, 1, 0, \"ng-template\", null, 6, i0.ɵɵtemplateRefExtractor);\n      i0.ɵɵelementEnd();\n    }\n    if (rf & 2) {\n      const _r3 = i0.ɵɵreference(16);\n      i0.ɵɵadvance(3);\n      i0.ɵɵproperty(\"ngIf\", ctx.uploadedFiles == null ? null : ctx.uploadedFiles.length)(\"ngIfElse\", _r3);\n      i0.ɵɵadvance(11);\n      i0.ɵɵproperty(\"ngForOf\", ctx.uploadedFiles);\n    }\n  },\n  dependencies: [i2.NgForOf, i2.NgIf],\n  styles: [\"\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n});\nexport class FileItem {\n  constructor() {\n    this.name = \"\";\n    this.size = 0;\n    this.type = \"\";\n    this.wrongSize = false;\n    this.wrongFormat = false;\n  }\n}","map":{"version":3,"mappings":"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","names":["EventEmitter","lastValueFrom","i0","HomeComponent","constructor","uploadFileService","ngOnInit","uploadFiles","files","folderHolder","uploadedFiles","file","Array","from","path","pathPieces","split","reverse","startsWith","currentFolder","b","uploadFile","push","fileName","folder","folderId","createFolder","p","selectors","inputs","acceptedFormat","maxSize","outputs","onSendFilesList","decls","vars","consts","template","FileItem"],"sourceRoot":"","sources":["/Users/jaredcortez/kappa-falcon/kappa-falcon/ClientApp/src/app/home/home.component.ts","/Users/jaredcortez/kappa-falcon/kappa-falcon/ClientApp/src/app/home/home.component.html"],"sourcesContent":["import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\nimport { lastValueFrom } from 'rxjs';\nimport { UploadFileService } from '../services/upload-file.service';\n\n@Component({\n  selector: 'app-home',\n  templateUrl: './home.component.html',\n  styleUrls: ['./home.component.css'],\n})\nexport class HomeComponent implements OnInit {\n  @Input() acceptedFormat: string = '.pdf';\n  @Input() maxSize: number = 102400;\n  @Output() onSendFilesList: EventEmitter<FileItem[]> = new EventEmitter<\n    FileItem[]\n  >();\n  // filesList = [];\n  uploadedFiles: any = [];\n  constructor(private uploadFileService: UploadFileService) {}\n  ngOnInit() {}\n\n  async uploadFiles(files: any) {\n    const folderHolder: any = {};\n    this.uploadedFiles = [];\n\n    let file: any;\n    for (file of Array.from(files)) {\n      // console.log(file['webkitRelativePath'], file['size'], file['type']);\n      const path: string = file['webkitRelativePath'];\n      const pathPieces: any = path.split('/');\n\n      if (!pathPieces.reverse()[0].startsWith('.')) {\n        const currentFolder: any = pathPieces[1];\n        // console.log('Checking for folder ', currentFolder, 'in', folderHolder);\n        if (folderHolder[currentFolder]) {\n          const b = await lastValueFrom(\n            this.uploadFileService.uploadFile(folderHolder[currentFolder], file)\n          );\n          this.uploadedFiles.push({\n            fileName: pathPieces[0],\n            folder: currentFolder,\n            folderId: folderHolder[currentFolder],\n          });\n        } else {\n          const folderId = await lastValueFrom(\n            this.uploadFileService.createFolder(currentFolder)\n          );\n          folderHolder[currentFolder] = folderId;\n\n          const p = await lastValueFrom(\n            this.uploadFileService.uploadFile(folderHolder[currentFolder], file)\n          );\n          this.uploadedFiles.push({\n            fileName: pathPieces[0],\n            folder: currentFolder,\n            folderId: folderHolder[currentFolder],\n          });\n        }\n      }\n    }\n    // console.log(this.uploadedFiles);\n  }\n}\n\nexport class FileItem {\n  name: string = \"\";\n  size: number = 0;\n  type: string = \"\";\n  wrongSize = false;\n  wrongFormat = false;\n}\n","<input\n  id=\"1-basic\"\n  type=\"file\"\n  #fileInput\n  (change)=\"uploadFiles(fileInput.files)\"\n  webkitdirectory\n  multiple\n/>\n\n<div style=\"width: 80%; margin-top: 30px\">\n  <ng-container *ngIf=\"uploadedFiles?.length; else noFiles\"></ng-container>\n  <table style=\"width: 100%\">\n    <thead>\n      <tr>\n        <th>File name</th>\n        <th>Folder</th>\n        <th>Id Folder</th>\n      </tr>\n    </thead>\n\n    <tbody>\n      <tr style=\"text-align: center\" *ngFor=\"let file of uploadedFiles\">\n        <th>{{ file?.fileName }}</th>\n        <td>{{ file?.folder }}</td>\n        <td>{{ file?.folderId }}</td>\n      </tr>\n    </tbody>\n  </table>\n\n  <ng-template #noFiles> No files </ng-template>\n</div>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}