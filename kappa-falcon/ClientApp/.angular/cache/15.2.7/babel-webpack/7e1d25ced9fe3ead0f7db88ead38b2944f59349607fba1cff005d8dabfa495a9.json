{"ast":null,"code":"import _asyncToGenerator from \"/Users/jaredcortez/kappa-falcon/kappa-falcon/ClientApp/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { EventEmitter } from '@angular/core';\nimport { lastValueFrom } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../services/upload-file.service\";\nimport * as i2 from \"@angular/common\";\nfunction HomeComponent_div_2_ng_template_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵtext(0, \" No directory chosen \");\n  }\n}\nfunction HomeComponent_div_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵtemplate(1, HomeComponent_div_2_ng_template_1_Template, 1, 0, \"ng-template\", null, 5, i0.ɵɵtemplateRefExtractor);\n    i0.ɵɵelementEnd();\n  }\n}\nfunction HomeComponent_table_4_tr_6_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"tr\", 8)(1, \"td\");\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const file_r6 = ctx.$implicit;\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(file_r6 == null ? null : file_r6.folder);\n  }\n}\nfunction HomeComponent_table_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"table\", 6)(1, \"thead\")(2, \"tr\")(3, \"th\");\n    i0.ɵɵtext(4, \"Folder\");\n    i0.ɵɵelementEnd()()();\n    i0.ɵɵelementStart(5, \"tbody\");\n    i0.ɵɵtemplate(6, HomeComponent_table_4_tr_6_Template, 3, 1, \"tr\", 7);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(6);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r2.uploadedFiles);\n  }\n}\nexport class HomeComponent {\n  constructor(uploadFileService) {\n    this.uploadFileService = uploadFileService;\n    this.acceptedFormat = '.pdf';\n    this.maxSize = 102400;\n    this.onSendFilesList = new EventEmitter();\n    this.wrongFilesList = [];\n    this.filesList = [];\n    this.uploadedFiles = [];\n  }\n  ngOnInit() {}\n  uploadFiles(files) {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      _this.wrongFilesList = [];\n      let _tempWrongFilesList = [];\n      let _tempFilesList = [];\n      const folderHolder = {};\n      _this.uploadedFiles = [];\n      let file;\n      for (file of Array.from(files)) {\n        //console.log(file['webkitRelativePath'], file['size'], file['type']);\n        const path = file['webkitRelativePath'];\n        const pathPieces = path.split('/');\n        if (!pathPieces.reverse()[0].startsWith('.')) {\n          const currentFolder = pathPieces[1];\n          //console.log('Checking for folder ', currentFolder, 'in', folderHolder);\n          if (folderHolder[currentFolder]) {\n            const b = yield lastValueFrom(_this.uploadFileService.uploadFile(folderHolder[currentFolder], file));\n            _this.uploadedFiles.push({\n              fileName: pathPieces[0],\n              folder: currentFolder,\n              folderId: folderHolder[currentFolder]\n            });\n          } else {\n            const folderId = yield lastValueFrom(_this.uploadFileService.createFolder(currentFolder));\n            folderHolder[currentFolder] = folderId;\n            const p = yield lastValueFrom(_this.uploadFileService.uploadFile(folderHolder[currentFolder], file));\n            _this.uploadedFiles.push({\n              fileName: pathPieces[0],\n              folder: currentFolder,\n              folderId: folderHolder[currentFolder]\n            });\n          }\n        }\n      }\n      // console.log(this.uploadedFiles);\n      /* _tempFilesList = Array.from(event.target.files);\n      if (_tempFilesList.length > 0)\n        _tempFilesList.forEach((file) => {\n          if (this.checkFileSizeMatches(file.size)) file.wrongSize = true;\n          if (this.checkFileTypesMatches(file.type)) file.wrongFormat = true;\n          if (file.wrongSize || file.wrongFormat) _tempWrongFilesList.push(file);\n        });\n           _tempFilesList = _tempFilesList.filter(\n        (elem) => elem.wrongFormat !== true && elem.wrongSize !== true\n      );\n      _tempFilesList.forEach((elem) => this.filesList.push(elem));\n           this.wrongFilesList = [..._tempWrongFilesList];\n      console.log(\n        'this.filesList',\n        JSON.stringify(this.filesList),\n        'this.wrongFilesList ',\n        this.wrongFilesList\n      );\n      if (this.filesList.length > 0) return this.emitFilesList(this.filesList);*/\n      //else return;\n    })();\n  }\n\n  emitFilesList(files) {\n    console.log(files);\n    this.onSendFilesList.emit(files);\n  }\n  checkFileSizeMatches(fileSize) {\n    return parseInt((fileSize / 1024).toFixed(4)) > this.maxSize || false;\n  }\n  checkFileTypesMatches(fileType) {\n    console.log(fileType, this.acceptedFormat);\n    if (!this.acceptedFormat.includes(fileType)) return false;else return fileType.match(this.acceptedFormat) === null;\n  }\n}\nHomeComponent.ɵfac = function HomeComponent_Factory(t) {\n  return new (t || HomeComponent)(i0.ɵɵdirectiveInject(i1.UploadFileService));\n};\nHomeComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: HomeComponent,\n  selectors: [[\"app-home\"]],\n  inputs: {\n    acceptedFormat: \"acceptedFormat\",\n    maxSize: \"maxSize\"\n  },\n  outputs: {\n    onSendFilesList: \"onSendFilesList\"\n  },\n  decls: 5,\n  vars: 4,\n  consts: [[\"id\", \"1-basic\", \"type\", \"file\", \"webkitdirectory\", \"\", \"multiple\", \"\", 3, \"change\"], [\"fileInput\", \"\"], [4, \"ngIf\", \"ngIfElse\"], [2, \"width\", \"80%\", \"margin-top\", \"30px\"], [\"style\", \"width: 100%\", 4, \"ngIf\", \"ngIfElse\"], [\"noFiles\", \"\"], [2, \"width\", \"100%\"], [\"style\", \"text-align: center\", 4, \"ngFor\", \"ngForOf\"], [2, \"text-align\", \"center\"]],\n  template: function HomeComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      const _r7 = i0.ɵɵgetCurrentView();\n      i0.ɵɵelementStart(0, \"input\", 0, 1);\n      i0.ɵɵlistener(\"change\", function HomeComponent_Template_input_change_0_listener() {\n        i0.ɵɵrestoreView(_r7);\n        const _r0 = i0.ɵɵreference(1);\n        return i0.ɵɵresetView(ctx.uploadFiles(_r0.files));\n      });\n      i0.ɵɵelementEnd();\n      i0.ɵɵtemplate(2, HomeComponent_div_2_Template, 3, 0, \"div\", 2);\n      i0.ɵɵelementStart(3, \"div\", 3);\n      i0.ɵɵtemplate(4, HomeComponent_table_4_Template, 7, 1, \"table\", 4);\n      i0.ɵɵelementEnd();\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"ngIf\", ctx.uploadedFiles == null ? null : ctx.uploadedFiles.length)(\"ngIfElse\", ctx.noFiles);\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"ngIf\", ctx.uploadedFiles == null ? null : ctx.uploadedFiles.length)(\"ngIfElse\", ctx.noFiles);\n    }\n  },\n  dependencies: [i2.NgForOf, i2.NgIf],\n  styles: [\"\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n});\nexport class FileItem {\n  constructor() {\n    this.name = \"\";\n    this.size = 0;\n    this.type = \"\";\n    this.wrongSize = false;\n    this.wrongFormat = false;\n  }\n}","map":{"version":3,"mappings":"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","names":["EventEmitter","lastValueFrom","i0","HomeComponent","constructor","uploadFileService","ngOnInit","uploadFiles","files","wrongFilesList","_tempWrongFilesList","_tempFilesList","folderHolder","uploadedFiles","file","Array","from","path","pathPieces","split","reverse","startsWith","currentFolder","b","uploadFile","push","fileName","folder","folderId","createFolder","p","emitFilesList","console","log","onSendFilesList","emit","checkFileSizeMatches","fileSize","parseInt","toFixed","maxSize","checkFileTypesMatches","fileType","acceptedFormat","includes","match","selectors","inputs","outputs","decls","vars","consts","template","FileItem"],"sourceRoot":"","sources":["/Users/jaredcortez/kappa-falcon/kappa-falcon/ClientApp/src/app/home/home.component.ts","/Users/jaredcortez/kappa-falcon/kappa-falcon/ClientApp/src/app/home/home.component.html"],"sourcesContent":["import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\nimport { UploadFileService } from '../services/upload-file.service';\nimport { lastValueFrom } from 'rxjs';\n\n@Component({\n  selector: 'app-home',\n  templateUrl: './home.component.html',\n  styleUrls: ['./home.component.css'],\n})\nexport class HomeComponent implements OnInit {\n  @Input() acceptedFormat: string = '.pdf';\n  @Input() maxSize: number = 102400;\n  @Output() onSendFilesList: EventEmitter<FileItem[]> = new EventEmitter<\n    FileItem[]\n  >();\n  wrongFilesList: any = [];\n  filesList: any = [];\n  uploadedFiles: any = [];\n  constructor(private uploadFileService: UploadFileService) {}\n  ngOnInit() {}\n\n  async uploadFiles(files: any) {\n    this.wrongFilesList = [];\n    let _tempWrongFilesList = [];\n    let _tempFilesList = [];\n    const folderHolder: any = {};\n    this.uploadedFiles = [];\n    let file: any;\n\n    for (file of Array.from(files)) {\n      //console.log(file['webkitRelativePath'], file['size'], file['type']);\n      const path: string = file['webkitRelativePath'];\n      const pathPieces = path.split('/');\n\n      if (!pathPieces.reverse()[0].startsWith('.')) {\n        const currentFolder = pathPieces[1];\n        //console.log('Checking for folder ', currentFolder, 'in', folderHolder);\n        if (folderHolder[currentFolder]) {\n          const b = await lastValueFrom(\n            this.uploadFileService.uploadFile(folderHolder[currentFolder], file)\n          );\n          this.uploadedFiles.push({\n            fileName: pathPieces[0],\n            folder: currentFolder,\n            folderId: folderHolder[currentFolder],\n          });\n        } else {\n          const folderId = await lastValueFrom(\n            this.uploadFileService.createFolder(currentFolder)\n          );\n          folderHolder[currentFolder] = folderId;\n\n          const p = await lastValueFrom(\n            this.uploadFileService.uploadFile(folderHolder[currentFolder], file)\n          );\n          this.uploadedFiles.push({\n            fileName: pathPieces[0],\n            folder: currentFolder,\n            folderId: folderHolder[currentFolder],\n          });\n        }\n      }\n    }\n    // console.log(this.uploadedFiles);\n    /* _tempFilesList = Array.from(event.target.files);\n    if (_tempFilesList.length > 0)\n      _tempFilesList.forEach((file) => {\n        if (this.checkFileSizeMatches(file.size)) file.wrongSize = true;\n        if (this.checkFileTypesMatches(file.type)) file.wrongFormat = true;\n        if (file.wrongSize || file.wrongFormat) _tempWrongFilesList.push(file);\n      });\n\n    _tempFilesList = _tempFilesList.filter(\n      (elem) => elem.wrongFormat !== true && elem.wrongSize !== true\n    );\n    _tempFilesList.forEach((elem) => this.filesList.push(elem));\n\n    this.wrongFilesList = [..._tempWrongFilesList];\n    console.log(\n      'this.filesList',\n      JSON.stringify(this.filesList),\n      'this.wrongFilesList ',\n      this.wrongFilesList\n    );\n    if (this.filesList.length > 0) return this.emitFilesList(this.filesList);*/\n    //else return;\n  }\n\n  emitFilesList(files: FileItem[]) {\n    console.log(files);\n    this.onSendFilesList.emit(files);\n  }\n\n  checkFileSizeMatches(fileSize: number): boolean {\n    return parseInt((fileSize / 1024).toFixed(4)) > this.maxSize || false;\n  }\n  checkFileTypesMatches(fileType: string): boolean {\n    console.log(fileType, this.acceptedFormat);\n    if (!this.acceptedFormat.includes(fileType)) return false;\n    else return fileType.match(this.acceptedFormat) === null;\n  }\n}\n\nexport class FileItem {\n  name: string = \"\";\n  size: number = 0;\n  type: string = \"\";\n  wrongSize = false;\n  wrongFormat = false;\n}","<input\n  id=\"1-basic\"\n  type=\"file\"\n  #fileInput\n  (change)=\"uploadFiles(fileInput.files)\"\n  webkitdirectory\n  multiple\n/>\n<div *ngIf=\"uploadedFiles?.length; else noFiles\">\n  <ng-template #noFiles> No directory chosen </ng-template>\n</div>\n\n<div style=\"width: 80%; margin-top: 30px\">\n  <table style=\"width: 100%\" *ngIf=\"uploadedFiles?.length; else noFiles\">\n    <thead>\n      <tr>\n        <th>Folder</th>\n      </tr>\n    </thead>\n\n    <tbody>\n      <tr style=\"text-align: center\" *ngFor=\"let file of uploadedFiles\">\n        <td>{{ file?.folder }}</td>\n      </tr>\n    </tbody>\n  </table>\n\n  <!-- <ng-template #noFiles> No files </ng-template> -->\n</div>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}