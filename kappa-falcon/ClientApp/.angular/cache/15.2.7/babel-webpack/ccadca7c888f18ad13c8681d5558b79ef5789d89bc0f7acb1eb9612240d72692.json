{"ast":null,"code":"import * as i0 from \"@angular/core\";\nexport class HomeComponent {}\nHomeComponent.ɵfac = function HomeComponent_Factory(t) {\n  return new (t || HomeComponent)();\n};\nHomeComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: HomeComponent,\n  selectors: [[\"app-home\"]],\n  decls: 6,\n  vars: 1,\n  consts: [[\"type\", \"file\", \"onchange\", \"console.log(event.target.files)\", \"multiple\", \"\", \"webkitdirectory\", \"\", 1, \"file-upload\"], [1, \"file-upload\"], [\"mat-mini-fab\", \"\", \"color\", \"primary\", 1, \"upload-btn\", 3, \"click\"]],\n  template: function HomeComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelement(0, \"input\", 0);\n      i0.ɵɵelementStart(1, \"div\", 1);\n      i0.ɵɵtext(2);\n      i0.ɵɵelementStart(3, \"button\", 2);\n      i0.ɵɵlistener(\"click\", function HomeComponent_Template_button_click_3_listener() {\n        return ctx.fileUpload.click();\n      });\n      i0.ɵɵelementStart(4, \"mat-icon\");\n      i0.ɵɵtext(5, \"attach_file\");\n      i0.ɵɵelementEnd()()();\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(2);\n      i0.ɵɵtextInterpolate1(\" \", ctx.fileName || \"No file uploaded yet.\", \" \");\n    }\n  },\n  styles: [\".file-input[_ngcontent-%COMP%] {\\n  display: none;\\n}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvaG9tZS9ob21lLmNvbXBvbmVudC5jc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7RUFDRSxhQUFhO0FBQ2YiLCJzb3VyY2VzQ29udGVudCI6WyIuZmlsZS1pbnB1dCB7XG4gIGRpc3BsYXk6IG5vbmU7XG59Il0sInNvdXJjZVJvb3QiOiIifQ== */\"]\n});\nexport class FileItem {\n  constructor() {\n    this.name = \"\";\n    this.size = 0;\n    this.type = \"\";\n  }\n}","map":{"version":3,"mappings":";AAUA,OAAM,MAAOA,aAAa;AAAbA,aAAa;mBAAbA,aAAa;AAAA;AAAbA,aAAa;QAAbA,aAAa;EAAAC;EAAAC;EAAAC;EAAAC;EAAAC;IAAA;MCc1BC,2BAME;MAEFA,8BAAyB;MACvBA,YAEA;MAAAA,iCAKC;MADCA;QAAA,OAASC,sBAAkB;MAAA,EAAC;MAE5BD,gCAAU;MAAAA,2BAAW;MAAAA,iBAAW;;;MARlCA,eAEA;MAFAA,wEAEA;;;;;AD2CF,OAAM,MAAOE,QAAQ;EAArBC;IACE,SAAI,GAAW,EAAE;IACjB,SAAI,GAAW,CAAC;IAChB,SAAI,GAAW,EAAE;EACnB","names":["HomeComponent","selectors","decls","vars","consts","template","i0","ctx","FileItem","constructor"],"sourceRoot":"","sources":["/Users/jaredcortez/kappa-falcon/kappa-falcon/ClientApp/src/app/home/home.component.ts","/Users/jaredcortez/kappa-falcon/kappa-falcon/ClientApp/src/app/home/home.component.html"],"sourcesContent":["import { Component, EventEmitter, Input, OnDestroy, OnInit, Output } from '@angular/core';\nimport { lastValueFrom, Subscription } from 'rxjs';\nimport { UploadFileService } from '../services/upload-file.service';\nimport { SendFileService } from '../services/send-file.service';\n\n@Component({\n  selector: 'app-home',\n  templateUrl: './home.component.html',\n  styleUrls: ['./home.component.css'],\n})\nexport class HomeComponent {\n  // @Input() acceptedFormat: string = '.pdf';\n  // @Input() maxSize: number = 102400;\n  // @Output() onSendFilesList: EventEmitter<FileItem[]> = new EventEmitter<\n  //   FileItem[]\n  // >();\n  // filesList = [];\n  // uploadedFiles: any = [];\n  // currentFolder: any = \"\";\n\n  // message: any;\n  // subscription: Subscription = new Subscription;\n\n  // constructor(private uploadFileService: UploadFileService, private data: SendFileService) { }\n  // ngOnInit() {\n  //   this.subscription = this.data.currentMessage.subscribe((message: any) => this.message = message)\n  // }\n\n  // ngOnDestroy(): void {\n  //   this.subscription.unsubscribe();\n  // }\n\n  // async UploadFiles(files: any) {\n  //   const folderHolder: any = {};\n  //   this.uploadedFiles = [];\n\n  //   let file: any;\n  //   for (file of Array.from(files)) {\n  //     // console.log(file['webkitRelativePath'], file['size'], file['type']);\n  //     const path: string = file['webkitRelativePath'];\n  //     const pathPieces: any = path.split('/');\n\n  //     if (!pathPieces.reverse()[0].startsWith('.')) {\n  //       this.currentFolder = pathPieces[1];\n  //       // console.log('Checking for folder ', currentFolder, 'in', folderHolder);\n  //       if (folderHolder[this.currentFolder]) {\n  //         const b = await lastValueFrom(\n  //           this.uploadFileService.uploadFile(folderHolder[this.currentFolder], file)\n  //         );\n  //         this.uploadedFiles.push({\n  //           fileName: pathPieces[0],\n  //           folder: this.currentFolder,\n  //           folderId: folderHolder[this.currentFolder],\n  //         });\n  //       } else {\n  //         const folderId = await lastValueFrom(\n  //           this.uploadFileService.createFolder(this.currentFolder)\n  //         );\n  //         folderHolder[this.currentFolder] = folderId;\n\n  //         const p = await lastValueFrom(\n  //           this.uploadFileService.uploadFile(folderHolder[this.currentFolder], file)\n  //         );\n  //         this.uploadedFiles.push({\n  //           fileName: pathPieces[0],\n  //           folder: this.currentFolder,\n  //           folderId: folderHolder[this.currentFolder],\n  //         });\n  //       }\n  //     }\n  //   }\n  //   console.log(this.uploadedFiles);\n  // }\n  // newMessage() {\n  //   this.data.changeMessage(this.uploadedFiles);\n  // }\n}\n\nexport class FileItem {\n  name: string = \"\";\n  size: number = 0;\n  type: string = \"\";\n}\n","<!-- <input\n  id=\"1-basic\"\n  type=\"file\"\n  #file_input\n  (change)=\"UploadFiles(file_input.files)\"\n  webkitdirectory\n  multiple\n/>\n<div style=\"width: 80%; margin-top: 30px\">\n  <ng-container *ngIf=\"uploadedFiles?.length\">\n    Directory selected: {{ currentFolder }}.\n  </ng-container>\n</div> -->\n\n<!-- <button\n  type=\"button\"\n  class=\"nav-item nav-link\"\n  [routerLink]=\"['/user']\"\n  (click)=\"newMessage()\"\n>\n  Test\n</button> -->\n\n<!-- <button type=\"button\" (click)=\"test(uploadedFiles)\">Upload</button> -->\n<input\n  type=\"file\"\n  class=\"file-upload\"\n  onchange=\"console.log(event.target.files)\"\n  multiple\n  webkitdirectory\n/>\n\n<div class=\"file-upload\">\n  {{ fileName || \"No file uploaded yet.\" }}\n\n  <button\n    mat-mini-fab\n    color=\"primary\"\n    class=\"upload-btn\"\n    (click)=\"fileUpload.click()\"\n  >\n    <mat-icon>attach_file</mat-icon>\n  </button>\n</div>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}