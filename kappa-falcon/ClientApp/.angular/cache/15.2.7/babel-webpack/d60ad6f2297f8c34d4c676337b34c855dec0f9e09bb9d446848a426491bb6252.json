{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/common\";\nfunction HomeComponent_mat_progress_bar_7_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"mat-progress-bar\", 6);\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"value\", ctx_r0.uploadProgress);\n  }\n}\nfunction HomeComponent_mat_icon_8_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r3 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"mat-icon\", 7);\n    i0.ɵɵlistener(\"click\", function HomeComponent_mat_icon_8_Template_mat_icon_click_0_listener() {\n      i0.ɵɵrestoreView(_r3);\n      const ctx_r2 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r2.cancelUpload());\n    });\n    i0.ɵɵtext(1, \"delete_forever\");\n    i0.ɵɵelementEnd();\n  }\n}\nexport class HomeComponent {\n  constructor(http) {\n    this.http = http;\n    // @Input() acceptedFormat: string = '.pdf';\n    // @Input() maxSize: number = 102400;\n    // @Output() onSendFilesList: EventEmitter<FileItem[]> = new EventEmitter<\n    //   FileItem[]\n    // >();\n    // filesList = [];\n    // uploadedFiles: any = [];\n    // currentFolder: any = \"\";\n    // message: any;\n    // subscription: Subscription = new Subscription;\n    // constructor(private uploadFileService: UploadFileService, private data: SendFileService) { }\n    // ngOnInit() {\n    //   this.subscription = this.data.currentMessage.subscribe((message: any) => this.message = message)\n    // }\n    // ngOnDestroy(): void {\n    //   this.subscription.unsubscribe();\n    // }\n    // async UploadFiles(files: any) {\n    //   const folderHolder: any = {};\n    //   this.uploadedFiles = [];\n    //   let file: any;\n    //   for (file of Array.from(files)) {\n    //     // console.log(file['webkitRelativePath'], file['size'], file['type']);\n    //     const path: string = file['webkitRelativePath'];\n    //     const pathPieces: any = path.split('/');\n    //     if (!pathPieces.reverse()[0].startsWith('.')) {\n    //       this.currentFolder = pathPieces[1];\n    //       // console.log('Checking for folder ', currentFolder, 'in', folderHolder);\n    //       if (folderHolder[this.currentFolder]) {\n    //         const b = await lastValueFrom(\n    //           this.uploadFileService.uploadFile(folderHolder[this.currentFolder], file)\n    //         );\n    //         this.uploadedFiles.push({\n    //           fileName: pathPieces[0],\n    //           folder: this.currentFolder,\n    //           folderId: folderHolder[this.currentFolder],\n    //         });\n    //       } else {\n    //         const folderId = await lastValueFrom(\n    //           this.uploadFileService.createFolder(this.currentFolder)\n    //         );\n    //         folderHolder[this.currentFolder] = folderId;\n    //         const p = await lastValueFrom(\n    //           this.uploadFileService.uploadFile(folderHolder[this.currentFolder], file)\n    //         );\n    //         this.uploadedFiles.push({\n    //           fileName: pathPieces[0],\n    //           folder: this.currentFolder,\n    //           folderId: folderHolder[this.currentFolder],\n    //         });\n    //       }\n    //     }\n    //   }\n    //   console.log(this.uploadedFiles);\n    // }\n    // newMessage() {\n    //   this.data.changeMessage(this.uploadedFiles);\n    // }\n    this.fileName = '';\n  }\n  onFileSelected(event) {\n    const file = event.target.files[0];\n    if (file) {\n      this.fileName = file.name;\n      const formData = new FormData();\n      formData.append(\"thumbnail\", file);\n      const upload$ = this.http.post(\"/api/thumbnail-upload\", formData);\n      upload$.subscribe();\n    }\n  }\n}\nHomeComponent.ɵfac = function HomeComponent_Factory(t) {\n  return new (t || HomeComponent)(i0.ɵɵdirectiveInject(i1.HttpClient));\n};\nHomeComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: HomeComponent,\n  selectors: [[\"app-home\"]],\n  decls: 9,\n  vars: 3,\n  consts: [[\"type\", \"file\", \"onchange\", \"console.log(event.target.files)\", \"multiple\", \"\", \"webkitdirectory\", \"\", 1, \"file-upload\"], [1, \"file-upload\"], [\"mat-mini-fab\", \"\", \"color\", \"primary\", 1, \"upload-btn\", 3, \"click\"], [1, \"progress\"], [\"class\", \"progress-bar\", \"mode\", \"determinate\", 3, \"value\", 4, \"ngIf\"], [\"class\", \"cancel-upload\", 3, \"click\", 4, \"ngIf\"], [\"mode\", \"determinate\", 1, \"progress-bar\", 3, \"value\"], [1, \"cancel-upload\", 3, \"click\"]],\n  template: function HomeComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelement(0, \"input\", 0);\n      i0.ɵɵelementStart(1, \"div\", 1);\n      i0.ɵɵtext(2);\n      i0.ɵɵelementStart(3, \"button\", 2);\n      i0.ɵɵlistener(\"click\", function HomeComponent_Template_button_click_3_listener() {\n        return ctx.fileUpload.click();\n      });\n      i0.ɵɵelementStart(4, \"mat-icon\");\n      i0.ɵɵtext(5, \"attach_file\");\n      i0.ɵɵelementEnd()()();\n      i0.ɵɵelementStart(6, \"div\", 3);\n      i0.ɵɵtemplate(7, HomeComponent_mat_progress_bar_7_Template, 1, 1, \"mat-progress-bar\", 4);\n      i0.ɵɵtemplate(8, HomeComponent_mat_icon_8_Template, 2, 0, \"mat-icon\", 5);\n      i0.ɵɵelementEnd();\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(2);\n      i0.ɵɵtextInterpolate1(\" \", ctx.fileName || \"No file uploaded yet.\", \" \");\n      i0.ɵɵadvance(5);\n      i0.ɵɵproperty(\"ngIf\", ctx.uploadProgress);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.uploadProgress);\n    }\n  },\n  dependencies: [i2.NgIf],\n  styles: [\".file-input[_ngcontent-%COMP%] {\\n  display: none;\\n}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvaG9tZS9ob21lLmNvbXBvbmVudC5jc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7RUFDRSxhQUFhO0FBQ2YiLCJzb3VyY2VzQ29udGVudCI6WyIuZmlsZS1pbnB1dCB7XG4gIGRpc3BsYXk6IG5vbmU7XG59Il0sInNvdXJjZVJvb3QiOiIifQ== */\"]\n});\nexport class FileItem {\n  constructor() {\n    this.name = \"\";\n    this.size = 0;\n    this.type = \"\";\n  }\n}","map":{"version":3,"mappings":";;;;;IA6CEA,sCAMmB;;;;IAHjBA,6CAAwB;;;;;;IAK1BA,mCAIG;IAFDA;MAAAA;MAAA;MAAA,OAASA,oCAAc;IAAA,EAAC;IAEvBA,8BAAc;IAAAA,iBAChB;;;AC/CH,OAAM,MAAOC,aAAa;EAoExBC,YAAoBC,IAAgB;IAAhB,SAAI,GAAJA,IAAI;IAnExB;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IAEA;IACA;IAEA;IACA;IACA;IACA;IAEA;IACA;IACA;IAEA;IACA;IACA;IAEA;IACA;IACA;IACA;IACA;IAEA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IAEA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA,aAAQ,GAAG,EAAE;EAE0B;EAEvCC,cAAc,CAACC,KAAU;IAEvB,MAAMC,IAAI,GAAQD,KAAK,CAACE,MAAM,CAACC,KAAK,CAAC,CAAC,CAAC;IAErC,IAAIF,IAAI,EAAE;MAER,IAAI,CAACG,QAAQ,GAAGH,IAAI,CAACI,IAAI;MAEzB,MAAMC,QAAQ,GAAG,IAAIC,QAAQ,EAAE;MAE/BD,QAAQ,CAACE,MAAM,CAAC,WAAW,EAAEP,IAAI,CAAC;MAElC,MAAMQ,OAAO,GAAG,IAAI,CAACX,IAAI,CAACY,IAAI,CAAC,uBAAuB,EAAEJ,QAAQ,CAAC;MAEjEG,OAAO,CAACE,SAAS,EAAE;;EAEzB;;AAtFWf,aAAa;mBAAbA,aAAa;AAAA;AAAbA,aAAa;QAAbA,aAAa;EAAAgB;EAAAC;EAAAC;EAAAC;EAAAC;IAAA;MDa1BrB,2BAME;MAEFA,8BAAyB;MACvBA,YAEA;MAAAA,iCAKC;MADCA;QAAA,OAASsB,sBAAkB;MAAA,EAAC;MAE5BtB,gCAAU;MAAAA,2BAAW;MAAAA,iBAAW;MAGpCA,8BAAsB;MACpBA,wFAMmB;MAEnBA,wEAKC;MACHA,iBAAM;;;MA1BJA,eAEA;MAFAA,wEAEA;MAcGA,eAAoB;MAApBA,yCAAoB;MAOpBA,eAAoB;MAApBA,yCAAoB;;;;;;AC4CzB,OAAM,MAAOuB,QAAQ;EAArBrB;IACE,SAAI,GAAW,EAAE;IACjB,SAAI,GAAW,CAAC;IAChB,SAAI,GAAW,EAAE;EACnB","names":["i0","HomeComponent","constructor","http","onFileSelected","event","file","target","files","fileName","name","formData","FormData","append","upload$","post","subscribe","selectors","decls","vars","consts","template","ctx","FileItem"],"sourceRoot":"","sources":["/Users/jaredcortez/kappa-falcon/kappa-falcon/ClientApp/src/app/home/home.component.html","/Users/jaredcortez/kappa-falcon/kappa-falcon/ClientApp/src/app/home/home.component.ts"],"sourcesContent":["<!-- <input\n  id=\"1-basic\"\n  type=\"file\"\n  #file_input\n  (change)=\"UploadFiles(file_input.files)\"\n  webkitdirectory\n  multiple\n/>\n<div style=\"width: 80%; margin-top: 30px\">\n  <ng-container *ngIf=\"uploadedFiles?.length\">\n    Directory selected: {{ currentFolder }}.\n  </ng-container>\n</div> -->\n\n<!-- <button\n  type=\"button\"\n  class=\"nav-item nav-link\"\n  [routerLink]=\"['/user']\"\n  (click)=\"newMessage()\"\n>\n  Test\n</button> -->\n\n<!-- <button type=\"button\" (click)=\"test(uploadedFiles)\">Upload</button> -->\n<input\n  type=\"file\"\n  class=\"file-upload\"\n  onchange=\"console.log(event.target.files)\"\n  multiple\n  webkitdirectory\n/>\n\n<div class=\"file-upload\">\n  {{ fileName || \"No file uploaded yet.\" }}\n\n  <button\n    mat-mini-fab\n    color=\"primary\"\n    class=\"upload-btn\"\n    (click)=\"fileUpload.click()\"\n  >\n    <mat-icon>attach_file</mat-icon>\n  </button>\n</div>\n<div class=\"progress\">\n  <mat-progress-bar\n    class=\"progress-bar\"\n    mode=\"determinate\"\n    [value]=\"uploadProgress\"\n    *ngIf=\"uploadProgress\"\n  >\n  </mat-progress-bar>\n\n  <mat-icon\n    class=\"cancel-upload\"\n    (click)=\"cancelUpload()\"\n    *ngIf=\"uploadProgress\"\n    >delete_forever</mat-icon\n  >\n</div>\n","import { Component, EventEmitter, Input, OnDestroy, OnInit, Output } from '@angular/core';\nimport { lastValueFrom, Subscription } from 'rxjs';\nimport { UploadFileService } from '../services/upload-file.service';\nimport { SendFileService } from '../services/send-file.service';\nimport { HttpClient } from \"@angular/common/http\";\n\n@Component({\n  selector: 'app-home',\n  templateUrl: './home.component.html',\n  styleUrls: ['./home.component.css'],\n})\nexport class HomeComponent {\n  // @Input() acceptedFormat: string = '.pdf';\n  // @Input() maxSize: number = 102400;\n  // @Output() onSendFilesList: EventEmitter<FileItem[]> = new EventEmitter<\n  //   FileItem[]\n  // >();\n  // filesList = [];\n  // uploadedFiles: any = [];\n  // currentFolder: any = \"\";\n\n  // message: any;\n  // subscription: Subscription = new Subscription;\n\n  // constructor(private uploadFileService: UploadFileService, private data: SendFileService) { }\n  // ngOnInit() {\n  //   this.subscription = this.data.currentMessage.subscribe((message: any) => this.message = message)\n  // }\n\n  // ngOnDestroy(): void {\n  //   this.subscription.unsubscribe();\n  // }\n\n  // async UploadFiles(files: any) {\n  //   const folderHolder: any = {};\n  //   this.uploadedFiles = [];\n\n  //   let file: any;\n  //   for (file of Array.from(files)) {\n  //     // console.log(file['webkitRelativePath'], file['size'], file['type']);\n  //     const path: string = file['webkitRelativePath'];\n  //     const pathPieces: any = path.split('/');\n\n  //     if (!pathPieces.reverse()[0].startsWith('.')) {\n  //       this.currentFolder = pathPieces[1];\n  //       // console.log('Checking for folder ', currentFolder, 'in', folderHolder);\n  //       if (folderHolder[this.currentFolder]) {\n  //         const b = await lastValueFrom(\n  //           this.uploadFileService.uploadFile(folderHolder[this.currentFolder], file)\n  //         );\n  //         this.uploadedFiles.push({\n  //           fileName: pathPieces[0],\n  //           folder: this.currentFolder,\n  //           folderId: folderHolder[this.currentFolder],\n  //         });\n  //       } else {\n  //         const folderId = await lastValueFrom(\n  //           this.uploadFileService.createFolder(this.currentFolder)\n  //         );\n  //         folderHolder[this.currentFolder] = folderId;\n\n  //         const p = await lastValueFrom(\n  //           this.uploadFileService.uploadFile(folderHolder[this.currentFolder], file)\n  //         );\n  //         this.uploadedFiles.push({\n  //           fileName: pathPieces[0],\n  //           folder: this.currentFolder,\n  //           folderId: folderHolder[this.currentFolder],\n  //         });\n  //       }\n  //     }\n  //   }\n  //   console.log(this.uploadedFiles);\n  // }\n  // newMessage() {\n  //   this.data.changeMessage(this.uploadedFiles);\n  // }\n  fileName = '';\n\n  constructor(private http: HttpClient) {}\n\n  onFileSelected(event: any) {\n\n    const file:File = event.target.files[0];\n\n      if (file) {\n\n        this.fileName = file.name;\n\n        const formData = new FormData();\n\n        formData.append(\"thumbnail\", file);\n\n        const upload$ = this.http.post(\"/api/thumbnail-upload\", formData);\n\n        upload$.subscribe();\n      }\n  }\n}\n\nexport class FileItem {\n  name: string = \"\";\n  size: number = 0;\n  type: string = \"\";\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}