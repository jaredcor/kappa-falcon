{"ast":null,"code":"import _asyncToGenerator from \"/Users/jaredcortez/kappa-falcon/kappa-falcon/ClientApp/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { EventEmitter } from '@angular/core';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../services/upload-file.service\";\nexport class HomeComponent {\n  constructor(uploadFileService) {\n    this.uploadFileService = uploadFileService;\n    // constructor(private router: Router) { }\n    // onFolderSelected(event: any) {\n    //   if (event.target.files.length > 0) {\n    //     let files = event.target.files;\n    //     let dir = event.target.value;\n    //     console.log(event);\n    //   }\n    //   this.router.navigate(['/user']);\n    // }\n    // SelectDirectory() {\n    //   window.electron.selectFolder().then((result: any) => {\n    //     let path = result ?? \"\";\n    //   })\n    // }\n    this.acceptedFormat = '.pdf';\n    this.maxSize = 102400;\n    this.onSendFilesList = new EventEmitter();\n    this.wrongFilesList = [];\n    this.filesList = [];\n    this.uploadedFiles = [];\n  }\n  ngOnInit() {}\n  uploadFiles(files) {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      _this.wrongFilesList = [];\n      let _tempWrongFilesList = [];\n      let _tempFilesList = [];\n      const folderHolder = {};\n      _this.uploadedFiles = [];\n      for (let file of Array.from(files)) {\n        //console.log(file['webkitRelativePath'], file['size'], file['type']);\n        const path = file['webkitRelativePath'];\n        const pathPieces = path.split('/');\n        if (!pathPieces.reverse()[0].startsWith('.')) {\n          const currentFolder = pathPieces[1];\n          //console.log('Checking for folder ', currentFolder, 'in', folderHolder);\n          if (folderHolder[currentFolder]) {\n            const b = yield lastValueFrom(_this.uploadFileService.uploadFile(folderHolder[currentFolder], file));\n            _this.uploadedFiles.push({\n              fileName: pathPieces[0],\n              folder: currentFolder,\n              folderId: folderHolder[currentFolder]\n            });\n          } else {\n            const folderId = yield lastValueFrom(_this.uploadFileService.createFolder(currentFolder));\n            folderHolder[currentFolder] = folderId;\n            const p = yield lastValueFrom(_this.uploadFileService.uploadFile(folderHolder[currentFolder], file));\n            _this.uploadedFiles.push({\n              fileName: pathPieces[0],\n              folder: currentFolder,\n              folderId: folderHolder[currentFolder]\n            });\n          }\n        }\n      }\n      // console.log(this.uploadedFiles);\n      /* _tempFilesList = Array.from(event.target.files);\n      if (_tempFilesList.length > 0)\n        _tempFilesList.forEach((file) => {\n          if (this.checkFileSizeMatches(file.size)) file.wrongSize = true;\n          if (this.checkFileTypesMatches(file.type)) file.wrongFormat = true;\n          if (file.wrongSize || file.wrongFormat) _tempWrongFilesList.push(file);\n        });\n           _tempFilesList = _tempFilesList.filter(\n        (elem) => elem.wrongFormat !== true && elem.wrongSize !== true\n      );\n      _tempFilesList.forEach((elem) => this.filesList.push(elem));\n           this.wrongFilesList = [..._tempWrongFilesList];\n      console.log(\n        'this.filesList',\n        JSON.stringify(this.filesList),\n        'this.wrongFilesList ',\n        this.wrongFilesList\n      );\n      if (this.filesList.length > 0) return this.emitFilesList(this.filesList);*/\n      //else return;\n    })();\n  }\n\n  emitFilesList(files) {\n    console.log(files);\n    this.onSendFilesList.emit(files);\n  }\n  checkFileSizeMatches(fileSize) {\n    return parseInt((fileSize / 1024).toFixed(4)) > this.maxSize || false;\n  }\n  checkFileTypesMatches(fileType) {\n    console.log(fileType, this.acceptedFormat);\n    if (!this.acceptedFormat.includes(fileType)) return false;else return fileType.match(this.acceptedFormat) === null;\n  }\n}\nHomeComponent.ɵfac = function HomeComponent_Factory(t) {\n  return new (t || HomeComponent)(i0.ɵɵdirectiveInject(i1.UploadFileService));\n};\nHomeComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: HomeComponent,\n  selectors: [[\"app-home\"]],\n  inputs: {\n    acceptedFormat: \"acceptedFormat\",\n    maxSize: \"maxSize\"\n  },\n  outputs: {\n    onSendFilesList: \"onSendFilesList\"\n  },\n  decls: 6,\n  vars: 0,\n  consts: [[\"id\", \"container\"], [\"id\", \"main\"], [\"type\", \"file\", \"webkitdirectory\", \"\", \"multiple\", \"\", 3, \"change\"], [\"file_input\", \"\"]],\n  template: function HomeComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      const _r1 = i0.ɵɵgetCurrentView();\n      i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1)(2, \"p\");\n      i0.ɵɵtext(3, \"Select Slippi directory\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(4, \"input\", 2, 3);\n      i0.ɵɵlistener(\"change\", function HomeComponent_Template_input_change_4_listener() {\n        i0.ɵɵrestoreView(_r1);\n        const _r0 = i0.ɵɵreference(5);\n        return i0.ɵɵresetView(ctx.uploadFiles(_r0.files));\n      });\n      i0.ɵɵelementEnd()()();\n    }\n  },\n  encapsulation: 2\n});\nexport class FileItem {\n  constructor() {\n    this.wrongSize = false;\n    this.wrongFormat = false;\n  }\n}","map":{"version":3,"mappings":"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","names":["EventEmitter","HomeComponent","constructor","uploadFileService","ngOnInit","uploadFiles","files","wrongFilesList","_tempWrongFilesList","_tempFilesList","folderHolder","uploadedFiles","file","Array","from","path","pathPieces","split","reverse","startsWith","currentFolder","b","lastValueFrom","uploadFile","push","fileName","folder","folderId","createFolder","p","emitFilesList","console","log","onSendFilesList","emit","checkFileSizeMatches","fileSize","parseInt","toFixed","maxSize","checkFileTypesMatches","fileType","acceptedFormat","includes","match","selectors","inputs","outputs","decls","vars","consts","template","i0","FileItem"],"sourceRoot":"","sources":["/Users/jaredcortez/kappa-falcon/kappa-falcon/ClientApp/src/app/home/home.component.ts","/Users/jaredcortez/kappa-falcon/kappa-falcon/ClientApp/src/app/home/home.component.html"],"sourcesContent":["import { Component, EventEmitter, Input, Output, OnInit } from '@angular/core';\nimport { Router } from \"@angular/router\";\nimport { UploadFileService } from '../services/upload-file.service';\n\n@Component({\n  selector: 'app-home',\n  templateUrl: './home.component.html',\n})\nexport class HomeComponent implements OnInit {\n  // constructor(private router: Router) { }\n\n  // onFolderSelected(event: any) {\n  //   if (event.target.files.length > 0) {\n  //     let files = event.target.files;\n  //     let dir = event.target.value;\n  //     console.log(event);\n  //   }\n  //   this.router.navigate(['/user']);\n  // }\n\n  // SelectDirectory() {\n  //   window.electron.selectFolder().then((result: any) => {\n  //     let path = result ?? \"\";\n  //   })\n  // }\n    @Input() acceptedFormat: string = '.pdf';\n  @Input() maxSize: number = 102400;\n  @Output() onSendFilesList: EventEmitter<FileItem[]> = new EventEmitter<\n    FileItem[]\n  >();\n  wrongFilesList = [];\n  filesList = [];\n  uploadedFiles = [];\n  constructor(private uploadFileService: UploadFileService) {}\n  ngOnInit() {}\n\n  async uploadFiles(files: any) {\n    this.wrongFilesList = [];\n    let _tempWrongFilesList = [];\n    let _tempFilesList = [];\n    const folderHolder = {};\n    this.uploadedFiles = [];\n    for (let file of Array.from(files)) {\n      //console.log(file['webkitRelativePath'], file['size'], file['type']);\n      const path: string = file['webkitRelativePath'];\n      const pathPieces = path.split('/');\n\n      if (!pathPieces.reverse()[0].startsWith('.')) {\n        const currentFolder = pathPieces[1];\n        //console.log('Checking for folder ', currentFolder, 'in', folderHolder);\n        if (folderHolder[currentFolder]) {\n          const b = await lastValueFrom(\n            this.uploadFileService.uploadFile(folderHolder[currentFolder], file)\n          );\n          this.uploadedFiles.push({\n            fileName: pathPieces[0],\n            folder: currentFolder,\n            folderId: folderHolder[currentFolder],\n          });\n        } else {\n          const folderId = await lastValueFrom(\n            this.uploadFileService.createFolder(currentFolder)\n          );\n          folderHolder[currentFolder] = folderId;\n\n          const p = await lastValueFrom(\n            this.uploadFileService.uploadFile(folderHolder[currentFolder], file)\n          );\n          this.uploadedFiles.push({\n            fileName: pathPieces[0],\n            folder: currentFolder,\n            folderId: folderHolder[currentFolder],\n          });\n        }\n      }\n    }\n    // console.log(this.uploadedFiles);\n    /* _tempFilesList = Array.from(event.target.files);\n    if (_tempFilesList.length > 0)\n      _tempFilesList.forEach((file) => {\n        if (this.checkFileSizeMatches(file.size)) file.wrongSize = true;\n        if (this.checkFileTypesMatches(file.type)) file.wrongFormat = true;\n        if (file.wrongSize || file.wrongFormat) _tempWrongFilesList.push(file);\n      });\n\n    _tempFilesList = _tempFilesList.filter(\n      (elem) => elem.wrongFormat !== true && elem.wrongSize !== true\n    );\n    _tempFilesList.forEach((elem) => this.filesList.push(elem));\n\n    this.wrongFilesList = [..._tempWrongFilesList];\n    console.log(\n      'this.filesList',\n      JSON.stringify(this.filesList),\n      'this.wrongFilesList ',\n      this.wrongFilesList\n    );\n    if (this.filesList.length > 0) return this.emitFilesList(this.filesList);*/\n    //else return;\n  }\n\n  emitFilesList(files: FileItem[]) {\n    console.log(files);\n    this.onSendFilesList.emit(files);\n  }\n\n  checkFileSizeMatches(fileSize: number): boolean {\n    return parseInt((fileSize / 1024).toFixed(4)) > this.maxSize || false;\n  }\n  checkFileTypesMatches(fileType: string): boolean {\n    console.log(fileType, this.acceptedFormat);\n    if (!this.acceptedFormat.includes(fileType)) return false;\n    else return fileType.match(this.acceptedFormat) === null;\n  }\n}\nexport class FileItem {\n  name: string;\n  size: number;\n  type: string;\n  wrongSize = false;\n  wrongFormat = false;\n}\n\n\n","<div id=\"container\">\n  <div id=\"main\">\n    <p>Select Slippi directory</p>\n    <input\n      type=\"file\"\n      #file_input\n      (change)=\"uploadFiles(file_input.files)\"\n      webkitdirectory\n      multiple\n    />\n  </div>\n</div>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}